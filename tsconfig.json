{
  // When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": true,

  // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
  "diffEditor.maxComputationTime": 5000,

  // Controls whether the diff editor shows +/- indicators for added/removed changes.
  "diffEditor.renderIndicators": true,

  // Controls whether the diff editor shows the diff side by side or inline.
  "diffEditor.renderSideBySide": true,

  // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
  //  - on
  //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.
  "editor.accessibilityPageSize": 10,

  // Controls whether the editor should run in a mode where it is optimized for screen readers.
  //  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
  //  - on: The editor will be permanently optimized for usage with a Screen Reader.
  //  - off: The editor will never be optimized for usage with a Screen Reader.
  "editor.accessibilitySupport": "auto",

  // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose brackets.
  //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingBrackets": "languageDefined",

  // Controls whether the editor should type over closing quotes or brackets.
  //  - always
  //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingOvertype": "auto",

  // Controls whether the editor should automatically close quotes after the user adds an opening quote.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose quotes.
  //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingQuotes": "languageDefined",

  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",

  // Controls whether the editor should automatically surround selections.
  //  - languageDefined: Use language configurations to determine when to automatically surround selections.
  //  - quotes: Surround with quotes but not brackets.
  //  - brackets: Surround with brackets but not quotes.
  //  - never
  "editor.autoSurround": "languageDefined",

  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {},

  // Controls whether the editor shows CodeLens.
  "editor.codeLens": true,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Enable that the selection with the mouse and keys is doing column selection.
  "editor.columnSelection": false,

  // Controls whether a space character is inserted when commenting.
  "editor.comments.insertSpace": true,

  // Controls whether syntax highlighting should be copied into the clipboard.
  "editor.copyWithSyntaxHighlighting": true,

  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",

  // Controls whether the smooth caret animation should be enabled.
  "editor.cursorSmoothCaretAnimation": false,

  // Controls the cursor style.
  "editor.cursorStyle": "line",

  // Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or `scrollOffset` in some other editors.
  "editor.cursorSurroundingLines": 0,

  // Controls when `cursorSurroundingLines` should be enforced.
  //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
  //  - all: `cursorSurroundingLines` is enforced always.
  "editor.cursorSurroundingLinesStyle": "default",

  // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
  "editor.cursorWidth": 0,

  // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-ui: Git SCM UI Integration
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - vscode.image-preview: Provides VS Code's built-in image preview
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-vscode.node-debug: Node.js debugging support (versions < 8.0)
  //  - ms-vscode.node-debug2: Node.js debugging support
  //  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - vscode.python: Provides syntax highlighting, bracket matching and folding in Python files.
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - vscode.vscode-account: Microsoft authentication provider
  //  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
  //  - alefragnani.Bookmarks: Mark lines and jump to them
  //  - alexcvzz.vscode-sqlite: Explore and query SQLite databases.
  //  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
  //  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
  //  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - donjayamanne.githistory: View git log, file history, compare branches or commits
  //  - eamodio.gitlens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - felixfbecker.php-intellisense: Advanced Autocompletion and Refactoring support for PHP
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.vscode-mysql: MySQL management tool
  //  - HookyQR.beautify: Beautify code in place for VS Code
  //  - jchannon.csharpextensions: C# IDE Extensions for VSCode
  //  - johnpapa.Angular2: Angular version 9 snippets by John Papa
  //  - lkytal.pomodoro: Pomodoro Timer for vscode
  //  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
  //  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
  //  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
  //  - ms-vscode.vscode-typescript-tslint-plugin: TSLint support for Visual Studio Code
  //  - msjsdiag.debugger-for-chrome: Debug your JavaScript code in the Chrome browser, or any other target that supports the Chrome Debugger protocol.
  //  - naumovs.color-highlight: Highlight web colors in your editor
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - Shan.code-settings-sync: Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.
  //  - valeryanm.vscode-phpsab: PHP Sniffer & Beautifier for Visual Studio Code
  //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
  "editor.defaultFormatter": null,

  // Controls whether the Go to Definition mouse gesture always opens the peek widget.
  "editor.definitionLinkOpensInPeek": false,

  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": true,

  // Controls whether the editor should allow moving selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Scrolling speed multiplier when pressing `Alt`.
  "editor.fastScrollSensitivity": 5,

  // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
  "editor.find.addExtraSpaceOnTop": true,

  // Controls whether the find operation is carried out on selected text or the entire file in the editor.
  //  - never: Never turn on Find in selection automatically (default)
  //  - always: Always turn on Find in selection automatically
  //  - multiline: Turn on Find in selection automatically when multiple lines of content are selected.
  "editor.find.autoFindInSelection": "never",

  // Controls whether the search string in the Find Widget is seeded from the editor selection.
  "editor.find.seedSearchStringFromSelection": true,

  // Controls whether the editor has code folding enabled.
  "editor.folding": true,

  // Controls whether the editor should highlight folded ranges.
  "editor.foldingHighlight": true,

  // Controls the strategy for computing folding ranges.
  //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
  //  - indentation: Use the indentation-based folding strategy.
  "editor.foldingStrategy": "auto",

  // Controls the font family.
  "editor.fontFamily": "'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",

  // Configures font ligatures or font features.
  "editor.fontLigatures": false,

  // Controls the font size in pixels.
  "editor.fontSize": 14,

  // Controls the font weight.
  "editor.fontWeight": "normal",

  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": false,

  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": false,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
  "editor.gotoLocation.alternativeImplementationCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
  "editor.gotoLocation.alternativeReferenceCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

  // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
  // 
  "editor.gotoLocation.multiple": null,

  // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleDeclarations": "peek",

  // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleDefinitions": "peek",

  // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleImplementations": "peek",

  // Controls the behavior the 'Go to References'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleReferences": "peek",

  // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleTypeDefinitions": "peek",

  // Controls whether the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Controls whether the editor should highlight the active indent guide.
  "editor.highlightActiveIndentGuide": true,

  // Controls the delay in milliseconds after which the hover is shown.
  "editor.hover.delay": 300,

  // Controls whether the hover is shown.
  "editor.hover.enabled": true,

  // Controls whether the hover should remain visible when mouse is moved over it.
  "editor.hover.sticky": true,

  // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Enables the code action lightbulb in the editor.
  "editor.lightbulb.enabled": true,

  // Controls the line height. Use 0 to compute the line height from the font size.
  "editor.lineHeight": 0,

  // Controls the display of line numbers.
  //  - off: Line numbers are not rendered.
  //  - on: Line numbers are rendered as absolute number.
  //  - relative: Line numbers are rendered as distance in lines to cursor position.
  //  - interval: Line numbers are rendered every 10 lines.
  "editor.lineNumbers": "on",

  // Controls whether the editor should detect links and make them clickable.
  "editor.links": true,

  // Highlight matching brackets.
  "editor.matchBrackets": "always",

  // Lines above this length will not be tokenized for performance reasons
  "editor.maxTokenizationLineLength": 20000,

  // Controls whether the minimap is shown.
  "editor.minimap.enabled": true,

  // Limit the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 120,

  // Render the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": true,

  // Scale of content drawn in the minimap: 1, 2 or 3.
  "editor.minimap.scale": 1,

  // Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "mouseover",

  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",

  // Controls the size of the minimap.
  //  - proportional: The minimap has the same size as the editor contents (and might scroll).
  //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
  //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
  "editor.minimap.size": "proportional",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "editor.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
  "editor.mouseWheelZoom": false,

  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,

  // The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "editor.multiCursorModifier": "alt",

  // Controls pasting when the line count of the pasted text matches the cursor count.
  //  - spread: Each cursor pastes a single line of the text.
  //  - full: Each cursor pastes the full text.
  "editor.multiCursorPaste": "spread",

  // Controls whether the editor should highlight semantic symbol occurrences.
  "editor.occurrencesHighlight": true,

  // Controls whether a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Controls the amount of space between the bottom edge of the editor and the last line.
  "editor.padding.bottom": 0,

  // Controls the amount of space between the top edge of the editor and the first line.
  "editor.padding.top": 0,

  // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
  "editor.parameterHints.cycle": false,

  // Enables a pop-up that shows parameter documentation and type information as you type.
  "editor.parameterHints.enabled": true,

  // Controls whether to focus the inline editor or the tree in the peek widget.
  //  - tree: Focus the tree when opening peek
  //  - editor: Focus the editor when opening peek
  "editor.peekWidgetDefaultFocus": "tree",

  // Controls whether suggestions should automatically show up while typing.
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },

  // Controls the delay in milliseconds after which quick suggestions will show up.
  "editor.quickSuggestionsDelay": 10,

  // Enable/disable the ability to preview changes before renaming
  "editor.rename.enablePreview": true,

  // Controls whether the editor auto renames on type.
  "editor.renameOnType": false,

  // Controls whether the editor should render control characters.
  "editor.renderControlCharacters": false,

  // Render last line number when the file ends with a newline.
  "editor.renderFinalNewline": true,

  // Controls whether the editor should render indent guides.
  "editor.renderIndentGuides": true,

  // Controls how the editor should render the current line highlight.
  //  - none
  //  - gutter
  //  - line
  //  - all: Highlights both the gutter and the current line.
  "editor.renderLineHighlight": "line",

  // Controls if the editor should render the current line highlight only when the editor is focused
  "editor.renderLineHighlightOnlyWhenFocus": false,

  // Controls how the editor should render whitespace characters.
  //  - none
  //  - boundary: Render whitespace characters except for single spaces between words.
  //  - selection: Render whitespace characters only on selected text.
  //  - all
  "editor.renderWhitespace": "selection",

  // Controls whether selections should have rounded corners.
  "editor.roundedSelection": true,

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [],

  // Controls the number of extra characters beyond which the editor will scroll horizontally.
  "editor.scrollBeyondLastColumn": 5,

  // Controls whether the editor will scroll beyond the last line.
  "editor.scrollBeyondLastLine": true,

  // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
  "editor.scrollPredominantAxis": true,

  // Controls whether the Linux primary clipboard should be supported.
  "editor.selectionClipboard": true,

  // Controls whether the editor should highlight matches similar to the selection.
  "editor.selectionHighlight": true,

  // Controls whether the semanticHighlighting is shown for the languages that support it.
  "editor.semanticHighlighting.enabled": true,

  // Controls when the folding controls on the gutter are shown.
  //  - always: Always show the folding controls.
  //  - mouseover: Only show the folding controls when the mouse is over the gutter.
  "editor.showFoldingControls": "mouseover",

  // Controls fading out of unused code.
  "editor.showUnused": true,

  // Controls whether the editor will scroll using an animation.
  "editor.smoothScrolling": false,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  //  - top: Show snippet suggestions on top of other suggestions.
  //  - bottom: Show snippet suggestions below other suggestions.
  //  - inline: Show snippets suggestions with other suggestions.
  //  - none: Do not show snippet suggestions.
  "editor.snippetSuggestions": "inline",

  // Keep peek editors open even when double clicking their content or when hitting `Escape`.
  "editor.stablePeek": false,

  // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
  // 
  "editor.suggest.filteredTypes": {},

  // Controls whether filtering and sorting suggestions accounts for small typos.
  "editor.suggest.filterGraceful": true,

  // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
  //  - insert: Insert suggestion without overwriting text right of the cursor.
  //  - replace: Insert suggestion and overwrite text right of the cursor.
  "editor.suggest.insertMode": "insert",

  // Controls whether sorting favours words that appear close to the cursor.
  "editor.suggest.localityBonus": false,

  // Controls how many suggestions IntelliSense will show before showing a scrollbar (maximum 15).
  "editor.suggest.maxVisibleSuggestions": 12,

  // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
  "editor.suggest.shareSuggestSelections": false,

  // When enabled IntelliSense shows `class`-suggestions.
  "editor.suggest.showClasses": true,

  // When enabled IntelliSense shows `color`-suggestions.
  "editor.suggest.showColors": true,

  // When enabled IntelliSense shows `constant`-suggestions.
  "editor.suggest.showConstants": true,

  // When enabled IntelliSense shows `constructor`-suggestions.
  "editor.suggest.showConstructors": true,

  // When enabled IntelliSense shows `customcolor`-suggestions.
  "editor.suggest.showCustomcolors": true,

  // When enabled IntelliSense shows `enumMember`-suggestions.
  "editor.suggest.showEnumMembers": true,

  // When enabled IntelliSense shows `enum`-suggestions.
  "editor.suggest.showEnums": true,

  // When enabled IntelliSense shows `event`-suggestions.
  "editor.suggest.showEvents": true,

  // When enabled IntelliSense shows `field`-suggestions.
  "editor.suggest.showFields": true,

  // When enabled IntelliSense shows `file`-suggestions.
  "editor.suggest.showFiles": true,

  // When enabled IntelliSense shows `folder`-suggestions.
  "editor.suggest.showFolders": true,

  // When enabled IntelliSense shows `function`-suggestions.
  "editor.suggest.showFunctions": true,

  // Controls whether to show or hide icons in suggestions.
  "editor.suggest.showIcons": true,

  // When enabled IntelliSense shows `interface`-suggestions.
  "editor.suggest.showInterfaces": true,

  // When enabled IntelliSense shows `issues`-suggestions.
  "editor.suggest.showIssues": true,

  // When enabled IntelliSense shows `keyword`-suggestions.
  "editor.suggest.showKeywords": true,

  // When enabled IntelliSense shows `method`-suggestions.
  "editor.suggest.showMethods": true,

  // When enabled IntelliSense shows `module`-suggestions.
  "editor.suggest.showModules": true,

  // When enabled IntelliSense shows `operator`-suggestions.
  "editor.suggest.showOperators": true,

  // When enabled IntelliSense shows `property`-suggestions.
  "editor.suggest.showProperties": true,

  // When enabled IntelliSense shows `reference`-suggestions.
  "editor.suggest.showReferences": true,

  // When enabled IntelliSense shows `snippet`-suggestions.
  "editor.suggest.showSnippets": true,

  // When enabled IntelliSense shows `struct`-suggestions.
  "editor.suggest.showStructs": true,

  // When enabled IntelliSense shows `typeParameter`-suggestions.
  "editor.suggest.showTypeParameters": true,

  // When enabled IntelliSense shows `unit`-suggestions.
  "editor.suggest.showUnits": true,

  // When enabled IntelliSense shows `user`-suggestions.
  "editor.suggest.showUsers": true,

  // When enabled IntelliSense shows `value`-suggestions.
  "editor.suggest.showValues": true,

  // When enabled IntelliSense shows `variable`-suggestions.
  "editor.suggest.showVariables": true,

  // When enabled IntelliSense shows `text`-suggestions.
  "editor.suggest.showWords": true,

  // Controls whether an active snippet prevents quick suggestions.
  "editor.suggest.snippetsPreventQuickSuggestions": true,

  // Controls the visibility of the status bar at the bottom of the suggest widget.
  "editor.suggest.statusBar.visible": false,

  // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used.
  "editor.suggestLineHeight": 0,

  // Controls whether suggestions should automatically show up when typing trigger characters.
  "editor.suggestOnTriggerCharacters": true,

  // Controls how suggestions are pre-selected when showing the suggest list.
  //  - first: Always select the first suggestion.
  //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
  //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
  "editor.suggestSelection": "recentlyUsed",

  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "off",

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Overrides editor colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {},

  // Overrides token color and styles from the currently selected color theme.
  "editor.tokenColorCustomizationsExperimental": {},

  // Remove trailing auto inserted whitespace.
  "editor.trimAutoWhitespace": true,

  // Controls whether clicking on the empty content after a folded line will unfold the line.
  "editor.unfoldOnClickAfterEndOfLine": false,

  // Inserting and deleting whitespace follows tab stops.
  "editor.useTabStops": true,

  // Controls whether completions should be computed based on words in the document.
  "editor.wordBasedSuggestions": true,

  // Characters that will be used as word separators when doing word related navigations or operations.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",

  // Controls the algorithm that computes wrapping points.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple",

  // Controls whether inline actions are always visible in the Source Control view.
  "scm.alwaysShowActions": false,

  // Controls whether to show the Source Control Provider section even when there's only one Provider registered.
  "scm.alwaysShowProviders": false,

  // Controls whether the SCM view should automatically reveal and select files when opening them.
  "scm.autoReveal": true,

  // Controls the Source Control count badge.
  //  - all: Show the sum of all Source Control Providers count badges.
  //  - focused: Show the count badge of the focused Source Control Provider.
  //  - off: Disable the Source Control count badge.
  "scm.countBadge": "all",

  // Controls the default Source Control repository view mode.
  //  - tree: Show the repository changes as a tree.
  //  - list: Show the repository changes as a list.
  "scm.defaultViewMode": "list",

  // Controls diff decorations in the editor.
  //  - all: Show the diff decorations in all available locations.
  //  - gutter: Show the diff decorations only in the editor gutter.
  //  - overview: Show the diff decorations only in the overview ruler.
  //  - minimap: Show the diff decorations only in the minimap.
  //  - none: Do not show the diff decorations.
  "scm.diffDecorations": "all",

  // Controls the visibility of the Source Control diff decorator in the gutter.
  //  - always: Show the diff decorator in the gutter at all times.
  //  - hover: Show the diff decorator in the gutter only on hover.
  "scm.diffDecorationsGutterVisibility": "always",

  // Controls the width(px) of diff decorations in gutter (added & modified).
  "scm.diffDecorationsGutterWidth": 3,

  // Controls how many providers are visible in the Source Control Provider section. Set to `0` to be able to manually resize the view.
  "scm.providers.visible": 10,

  // If set, automatically switch to the preferred color theme based on the OS appearance.
  "window.autoDetectColorScheme": false,

  // Controls the visibility of the activity bar in the workbench.
  "workbench.activityBar.visible": true,

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls whether the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
  "workbench.editor.centeredLayoutAutoResize": true,

  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,

  // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls whether opened editors show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing) and show up with an italic font style.
  "workbench.editor.enablePreview": true,

  // Controls whether editors opened from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // Controls whether tabs are closed in most recently used order or from left to right.
  "workbench.editor.focusRecentEditorAfterClose": true,

  // Controls whether a top border is drawn on modified (dirty) editor tabs or not.
  "workbench.editor.highlightModifiedTabs": false,

  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "default",

  // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors that are not dirty will close to make space for newly opening editors.
  "workbench.editor.limit.enabled": false,

  // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
  "workbench.editor.limit.perEditorGroup": false,

  // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
  "workbench.editor.limit.value": 10,

  // Navigate between open files using mouse buttons four and five if provided.
  "workbench.editor.mouseBackForwardToNavigate": true,

  // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",

  // Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.
  "workbench.editor.restoreViewState": true,

  // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls whether opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls whether opened editors should show in tabs or not.
  "workbench.editor.showTabs": true,

  // Controls the sizing of editor groups when splitting them.
  //  - distribute: Splits all the editor groups to equal parts.
  //  - split: Splits the active editor group to equal parts.
  "workbench.editor.splitSizing": "distribute",

  // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.
  "workbench.editor.tabCloseButton": "right",

  // Controls the sizing of editor tabs.
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
  //  - default: The default size.
  //  - large: Increases the size, so it can be grabed more easily with the mouse
  "workbench.editor.titleScrollbarSizing": "default",

  // Controls the format of the label for an untitled editor.
  //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
  //  - name: The name of the untitled file is not derived from the contents of the file.
  "workbench.editor.untitled.labelFormat": "content",

  // Configure which editor to use for specific file types.
  "workbench.editorAssociations": [],

  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,

  // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  //  - null: No file icons
  //  - vs-minimal
  //  - vs-seti
  //  - material-icon-theme
  "workbench.iconTheme": "vs-seti",

  // Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
  "workbench.list.automaticKeyboardNavigation": true,

  // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
  "workbench.list.horizontalScrolling": false,

  // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
  //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
  //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
  "workbench.list.keyboardNavigation": "highlight",

  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. 
  "workbench.list.openMode": "singleClick",

  // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.
  "workbench.panel.defaultLocation": "bottom",

  // Specifies the preferred color theme for dark OS appearance when 'window.autoDetectColorScheme' is enabled.
  "workbench.preferredDarkColorTheme": "Default Dark+",

  // Specifies the preferred color theme used in high contrast mode when 'window.autoDetectHighContrast' is enabled.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // Specifies the preferred color theme for light OS appearance when 'window.autoDetectColorScheme' is enabled.
  "workbench.preferredLightColorTheme": "Default Light+",

  // Specifies the workbench icon theme used.
  //  - Default: Default
  "workbench.productIconTheme": "Default",

  // Controls whether Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
  "workbench.quickOpen.preserveInput": false,

  // Determines which settings editor to use by default.
  //  - ui: Use the settings UI editor.
  //  - json: Use the JSON file editor.
  "workbench.settings.editor": "ui",

  // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
  "workbench.settings.openDefaultKeybindings": false,

  // Controls whether opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": false,

  // Controls whether to use the split JSON editor when editing settings as JSON.
  "workbench.settings.useSplitJSON": false,

  // Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
  "workbench.sideBar.location": "left",

  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page (default).
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
  //  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  "workbench.startupEditor": "welcomePage",

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // This setting is deprecated, please use 'workbench.list.horizontalScrolling' instead.
  // Controls whether trees support horizontal scrolling in the workbench.
  "workbench.tree.horizontalScrolling": false,

  // Controls tree indentation in pixels.
  "workbench.tree.indent": 8,

  // Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "onHover",

  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false,

  // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,

  // Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
  "window.customMenuBarAltFocus": true,

  // If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
  "window.doubleClickIconToClose": false,

  // Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
  "window.enableMenuBarMnemonics": true,

  // Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.
  //  - default: Menu is only hidden in full screen mode.
  //  - visible: Menu is always visible even in full screen mode.
  //  - toggle: Menu is hidden but can be displayed via Alt key.
  //  - hidden: Menu is always hidden.
  //  - compact: Menu is displayed as a compact button in the sidebar. This value is ignored when 'window.titleBarStyle' is 'native'.
  "window.menuBarVisibility": "default",

  // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  //  - default: Open new windows in the center of the screen.
  //  - inherit: Open new windows with same dimension as last active one.
  //  - offset: Open new windows with same dimension as last active one with an offset position.
  //  - maximized: Open new windows maximized.
  //  - fullscreen: Open new windows in full screen mode.
  "window.newWindowDimensions": "default",

  // Controls whether files should open in a new window.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Files will open in a new window.
  //  - off: Files will open in the window with the files' folder open or the last active window.
  //  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
  "window.openFilesInNewWindow": "off",

  // Controls whether folders should open in a new window or replace the last active window.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Folders will open in a new window.
  //  - off: Folders will replace the last active window.
  //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
  "window.openFoldersInNewWindow": "default",

  // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Open a new empty window.
  //  - off: Focus the last active running instance.
  "window.openWithoutArgumentsInNewWindow": "on",

  // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,

  // Controls how windows are being reopened after a restart.
  //  - all: Reopen all windows.
  //  - folders: Reopen all folders. Empty workspaces will not be restored.
  //  - one: Reopen the last active window.
  //  - none: Never reopen a window. Always start with an empty one.
  "window.restoreWindows": "all",

  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
  // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
  // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
  // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
  // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
  // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
  // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
  // - `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).
  // - `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).
  // - `${appName}`: e.g. VS Code.
  // - `${remoteName}`: e.g. SSH
  // - `${dirty}`: a dirty indicator if the active editor is dirty.
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

  // Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
  "window.titleBarStyle": "native",

  // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
  "window.zoomLevel": 0,

  // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
  "files.associations": {},

  // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.
  "files.autoGuessEncoding": false,

  // Controls auto save of dirty editors. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
  //  - off: A dirty editor is never automatically saved.
  //  - afterDelay: A dirty editor is automatically saved after the configured `files.autoSaveDelay`.
  //  - onFocusChange: A dirty editor is automatically saved when the editor loses focus.
  //  - onWindowChange: A dirty editor is automatically saved when the window loses focus.
  "files.autoSave": "off",

  // Controls the delay in ms after which a dirty editor is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
  "files.autoSaveDelay": 1000,

  // The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.
  "files.defaultLanguage": "",

  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
  "files.enableTrash": true,

  // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // The default end of line character.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Uses operating system specific end of line character.
  "files.eol": "auto",

  // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  //  - off: Disable hot exit. A prompt will show when attempting to close a window with dirty files.
  //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`
  //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`
  "files.hotExit": "onExit",

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,

  // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
  "files.maxMemoryForLargeFilesMB": 4096,

  // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
  "files.participants.timeout": 5000,

  // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
  //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
  //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
  "files.saveConflictResolution": "askUser",

  // Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
  "files.simpleDialog.enable": false,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/**": true,
    "**/.hg/store/**": true
  },

  // Only show keyboard shortcuts in Screencast Mode.
  "screencastMode.onlyKeyboardShortcuts": false,

  // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
  "screencastMode.verticalOffset": 20,

  // Controls whether turning on Zen Mode also centers the layout.
  "zenMode.centerLayout": true,

  // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,

  // Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.
  "zenMode.hideActivityBar": true,

  // Controls whether turning on Zen Mode also hides the editor line numbers.
  "zenMode.hideLineNumbers": true,

  // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,

  // Controls whether turning on Zen Mode also hides workbench tabs.
  "zenMode.hideTabs": true,

  // Controls whether a window should restore to zen mode if it was exited in zen mode.
  "zenMode.restore": false,

  // Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
  "zenMode.silentNotifications": true,

  // Controls whether the explorer should automatically reveal and select files when opening them.
  "explorer.autoReveal": true,

  // Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  "explorer.compactFolders": true,

  // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,

  // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,

  // Controls whether file decorations should use badges.
  "explorer.decorations.badges": true,

  // Controls whether file decorations should use colors.
  "explorer.decorations.colors": true,

  // Controls whether the explorer should allow to move files and folders via drag and drop.
  "explorer.enableDragAndDrop": true,

  // Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
  //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
  //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
  "explorer.incrementalNaming": "simple",

  // Number of editors shown in the Open Editors pane.
  "explorer.openEditors.visible": 9,

  // Controls sorting order of files and folders in the explorer.
  //  - default: Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.
  //  - mixed: Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.
  //  - filesFirst: Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.
  //  - type: Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.
  //  - modified: Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.
  "explorer.sortOrder": "default",

  // Controls the positioning of the actionbar on rows in the search view.
  //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
  //  - right: Always position the actionbar to the right.
  "search.actionsPosition": "auto",

  // Controls whether the search results will be collapsed or expanded.
  //  - auto: Files with less than 10 results are expanded. Others are collapsed.
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",

  // Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,

  // This setting is deprecated. Please use the search view's context menu instead.
  // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
  "search.location": "sidebar",

  // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
  "search.maintainFileSearchCache": false,

  // Controls sorting order of editor history in quick open when filtering.
  //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
  //  - recency: History entries are sorted by recency. More recently opened entries appear first.
  "search.quickOpen.history.filterSortOrder": "default",

  // Whether to include results from recently opened files in the file results for Quick Open.
  "search.quickOpen.includeHistory": true,

  // Whether to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,

  // Configure effect of double clicking a result in a search editor.
  //  - selectWord: Double clicking selects the word under the cursor.
  //  - goToLocation: Double clicking opens the result in the active editor group.
  //  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
  "search.searchEditor.doubleClickBehaviour": "goToLocation",

  // Search all files as you type.
  "search.searchOnType": true,

  // When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
  "search.searchOnTypeDebouncePeriod": 300,

  // Controls whether to show line numbers for search results.
  "search.showLineNumbers": false,

  // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
  "search.smartCase": false,

  // Controls sorting order of search results.
  //  - default: Results are sorted by folder and file names, in alphabetical order.
  //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
  //  - type: Results are sorted by file extensions, in alphabetical order.
  //  - modified: Results are sorted by file last modified date, in descending order.
  //  - countDescending: Results are sorted by count per file, in descending order.
  //  - countAscending: Results are sorted by count per file, in ascending order.
  "search.sortOrder": "default",

  // Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
  "search.useGlobalIgnoreFiles": false,

  // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
  "search.useIgnoreFiles": true,

  // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
  // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
  "search.usePCRE2": false,

  // Controls whether to open Replace Preview when selecting or replacing a match.
  "search.useReplacePreview": true,

  // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
  // This setting is deprecated and now falls back on "search.usePCRE2".
  "search.useRipgrep": true,

  // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
  "http.proxy": "",

  // The value to send as the `Proxy-Authorization` header for every network request.
  "http.proxyAuthorization": null,

  // Controls whether the proxy server certificate should be verified against the list of supplied CAs.
  "http.proxyStrictSSL": true,

  // Use the proxy support for extensions.
  //  - off: Disable proxy support for extensions.
  //  - on: Enable proxy support for extensions.
  //  - override: Enable proxy support for extensions, override request options.
  "http.proxySupport": "override",

  // Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)
  "http.systemCertificates": true,

  // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
  "keyboard.dispatch": "code",

  // This setting is deprecated, please use 'update.mode' instead.
  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  "update.channel": "default",

  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  //  - none: Disable updates.
  //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
  //  - start: Check for updates only on startup. Disable automatic background update checks.
  //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
  "update.mode": "default",

  // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
  "update.showReleaseNotes": true,

  // Controls when the comments panel should open.
  "comments.openPanel": "openOnSessionStartWithComments",

  // Allow setting breakpoints in any file.
  "debug.allowBreakpointsEverywhere": false,

  // Controls if the debug console should be automatically closed when the debug session ends.
  "debug.console.closeOnEnd": false,

  // Controls the font family in the debug console.
  "debug.console.fontFamily": "default",

  // Controls the font size in pixels in the debug console.
  "debug.console.fontSize": 14,

  // Controls if the debug console should suggest previously typed input.
  "debug.console.historySuggestions": true,

  // Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
  "debug.console.lineHeight": 0,

  // Controls if the lines should wrap in the debug console.
  "debug.console.wordWrap": true,

  // Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.
  "debug.enableAllHovers": false,

  // Controls whether the workbench window should be focused when the debugger breaks.
  "debug.focusWindowOnBreak": true,

  // Show variable values inline in editor while debugging.
  "debug.inlineValues": false,

  // Controls when the internal debug console should open.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Controls what to do when errors are encountered after running a preLaunchTask.
  //  - debugAnyway: Ignore task errors and start debugging.
  //  - showErrors: Show the Problems view and do not start debugging.
  //  - prompt: Prompt user.
  //  - abort: Cancel debugging.
  "debug.onTaskErrors": "prompt",

  // Controls when the debug view should open.
  "debug.openDebug": "openOnSessionStart",

  // Automatically open the explorer view at the end of a debug session.
  "debug.openExplorerOnEnd": false,

  // Controls whether breakpoints should be shown in the overview ruler.
  "debug.showBreakpointsInOverviewRuler": false,

  // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
  "debug.showInlineBreakpointCandidates": true,

  // Controls when the debug status bar should be visible.
  //  - never: Never show debug in status bar
  //  - always: Always show debug in status bar
  //  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
  "debug.showInStatusBar": "onFirstSessionStart",

  // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
  "debug.showSubSessionsInToolBar": false,

  // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
  "debug.toolBarLocation": "floating",

  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
  "launch": {
    "configurations": [],
    "compounds": []
  },

  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  // 
  // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
  // 
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "html.customData": [],

  // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
  "html.format.contentUnformatted": "pre,code,textarea",

  // Enable/disable default HTML formatter.
  "html.format.enable": true,

  // End with a newline.
  "html.format.endWithNewline": false,

  // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
  "html.format.extraLiners": "head, body, /html",

  // Format and indent `{{#foo}}` and `{{/foo}}`.
  "html.format.indentHandlebars": false,

  // Indent `<head>` and `<body>` sections.
  "html.format.indentInnerHtml": false,

  // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
  "html.format.maxPreserveNewLines": null,

  // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,

  // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // Wrap attributes.
  //  - auto: Wrap attributes only when line length is exceeded.
  //  - force: Wrap each attribute except first.
  //  - force-aligned: Wrap each attribute except first and keep aligned.
  //  - force-expand-multiline: Wrap each attribute.
  //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
  //  - preserve: Preserve wrapping of attributes
  //  - preserve-aligned: Preserve wrapping of attributes but align.
  "html.format.wrapAttributes": "auto",

  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,

  // Deprecated in favor of `editor.renameOnType`
  // Enable/disable mirroring cursor on matching HTML tag.
  "html.mirrorCursorOnMatchingTag": false,

  // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,

  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",

  // Controls whether the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,

  // Controls whether the built-in HTML language support validates embedded styles.
  "html.validate.styles": true,

  // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
  // Enables or disables color decorators
  "json.colorDecorators.enable": true,

  // Enable/disable default JSON formatter
  "json.format.enable": true,

  // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
  "json.maxItemsComputed": 5000,

  // Associate schemas to JSON files in the current project
  "json.schemas": [],

  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off",

  // Controls where links in markdown files should be opened.
  //  - currentGroup: Open links in the active editor group.
  //  - beside: Open links beside the active editor.
  "markdown.links.openLocation": "currentGroup",

  // Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.
  "markdown.preview.breaks": false,

  // Double click in the markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Controls the font family used in the markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'Ubuntu', 'Droid Sans', sans-serif",

  // Controls the font size in pixels used in the markdown preview.
  "markdown.preview.fontSize": 14,

  // Controls the line height used in the markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,

  // Enable or disable conversion of URL-like text to links in the markdown preview.
  "markdown.preview.linkify": true,

  // Mark the current editor selection in the markdown preview.
  "markdown.preview.markEditorSelection": true,

  // Controls how links to other markdown files in the markdown preview should be opened.
  //  - inPreview: Try to open links in the markdown preview
  //  - inEditor: Try to open links in the editor
  "markdown.preview.openMarkdownLinks": "inPreview",

  // When a markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,

  // When a markdown editor is scrolled, update the view of the preview.
  "markdown.preview.scrollPreviewWithEditor": true,

  // A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],

  // Enable debug logging for the markdown extension.
  "markdown.trace": "off",

  // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,

  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,

  // Points to the PHP executable.
  "php.validate.executablePath": null,

  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave",

  // Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
  "javascript.autoClosingTags": true,

  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
  "javascript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "javascript.format.semicolons": "ignore",

  // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
  "javascript.implicitProjectConfig.checkJs": false,

  // Enable/disable `experimentalDecorators` for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Preferred path style for auto imports.
  //  - auto: Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.
  //  - relative: Relative to the file location.
  //  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
  "javascript.preferences.importModuleSpecifier": "auto",

  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`
  //  - js: Do not shorten path endings; include the `.js` extension.
  "javascript.preferences.importModuleSpecifierEnding": "auto",

  // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
  "javascript.preferences.quoteStyle": "auto",

  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "javascript.preferences.renameShorthandProperties": true,

  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in JavaScript files.
  "javascript.referencesCodeLens.showOnAllFunctions": false,

  // Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
  "javascript.suggest.autoImports": true,

  // Complete functions with their parameter signature.
  "javascript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "javascript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "javascript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
  "javascript.suggest.names": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "javascript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
  "javascript.suggestionActions.enabled": true,

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,

  // Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
  "typescript.autoClosingTags": true,

  // Check if npm is installed for Automatic Type Acquisition.
  "typescript.check.npmIsInstalled": true,

  // Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "typescript.format.semicolons": "ignore",

  // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
  "typescript.implementationsCodeLens.enabled": false,

  // Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of `null` uses VS Code's locale.
  "typescript.locale": null,

  // Specifies the path to the npm executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.
  "typescript.npm": null,

  // Preferred path style for auto imports.
  //  - auto: Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.
  //  - relative: Relative to the file location.
  //  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
  "typescript.preferences.importModuleSpecifier": "auto",

  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`
  //  - js: Do not shorten path endings; include the `.js` extension.
  "typescript.preferences.importModuleSpecifierEnding": "auto",

  // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
  "typescript.preferences.quoteStyle": "auto",

  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "typescript.preferences.renameShorthandProperties": true,

  // Enable/disable references CodeLens in TypeScript files.
  "typescript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in TypeScript files.
  "typescript.referencesCodeLens.showOnAllFunctions": false,

  // Report style checks as warnings.
  "typescript.reportStyleChecksAsWarnings": true,

  // Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
  "typescript.suggest.autoImports": true,

  // Complete functions with their parameter signature.
  "typescript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "typescript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "typescript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "typescript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
  "typescript.suggestionActions.enabled": true,

  // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
  "typescript.surveys.enabled": true,

  // Controls auto detection of tsc tasks.
  //  - on: Create both build and watch tasks.
  //  - off: Disable this feature.
  //  - build: Only create single run compile tasks.
  //  - watch: Only create compile and watch tasks.
  "typescript.tsc.autoDetect": "on",

  // Specifies the folder path to the tsserver and lib*.d.ts files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
  // 
  // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
  // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
  // 
  // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
  "typescript.tsdk": null,

  // (Experimental) Enables project wide error reporting.
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,

  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",

  // Set the maximum amount of memory (in MB) to allocate to the TypeScript server process
  "typescript.tsserver.maxTsServerMemory": 3072,

  // Additional paths to discover TypeScript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.
  "typescript.tsserver.pluginPaths": [],

  // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.trace": "off",

  // Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
  "typescript.tsserver.useSeparateSyntaxServer": true,

  // Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
  "typescript.tsserver.watchOptions": {},

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true,

  // Insert semicolon at end of line when completing CSS properties
  "css.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "css.completion.triggerPropertyValueCompletion": true,

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
  // 
  // VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
  // 
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "css.customData": [],

  // Invalid number of parameters.
  "css.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "css.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "css.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "css.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "css.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "css.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "css.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "css.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",

  // Import statements do not load in parallel.
  "css.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "css.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "css.lint.unknownAtRules": "warning",

  // Unknown property.
  "css.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "css.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "css.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "css.lint.zeroUnits": "ignore",

  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",

  // Enables or disables all validations.
  "css.validate": true,

  // Insert semicolon at end of line when completing CSS properties
  "less.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "less.completion.triggerPropertyValueCompletion": true,

  // Invalid number of parameters.
  "less.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "less.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "less.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "less.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "less.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "less.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "less.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "less.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",

  // Import statements do not load in parallel.
  "less.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "less.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "less.lint.unknownAtRules": "warning",

  // Unknown property.
  "less.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "less.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "less.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "less.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "less.validate": true,

  // Insert semicolon at end of line when completing CSS properties
  "scss.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "scss.completion.triggerPropertyValueCompletion": true,

  // Invalid number of parameters.
  "scss.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "scss.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "scss.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "scss.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "scss.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "scss.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "scss.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",

  // Import statements do not load in parallel.
  "scss.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "scss.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "scss.lint.unknownAtRules": "warning",

  // Unknown property.
  "scss.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "scss.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "scss.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "scss.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "scss.validate": true,

  // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
  "extensions.autoCheckUpdates": true,

  // When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.
  "extensions.autoUpdate": true,

  // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
  "extensions.closeExtensionDetailsOnViewChange": false,

  // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
  "extensions.confirmedUriHandlerExtensionIds": [],

  // When enabled, the notifications for extension recommendations will not be shown.
  "extensions.ignoreRecommendations": false,

  // When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.
  "extensions.showRecommendationsOnlyOnDemand": false,

  // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
  "output.smartScroll.enabled": true,

  // Customizes what kind of terminal to launch.
  //  - integrated: Use VS Code's integrated terminal.
  //  - external: Use the configured external terminal.
  "terminal.explorerKind": "integrated",

  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "x-terminal-emulator",

  // Customizes which terminal application to run on macOS.
  "terminal.external.osxExec": "Terminal.app",

  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

  // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
  "terminal.integrated.allowChords": true,

  // Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes will skip the shell when true. This does nothing on macOS.
  "terminal.integrated.allowMnemonics": false,

  // A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.linux": null,

  // A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.osx": null,

  // A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.windows": null,

  // A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.
  // Default Skipped Commands:
  // 
  // - editor.action.toggleTabFocusMode
  // - workbench.action.debug.continue
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFindWidget
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.hideFindWidget
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.navigationModeExit
  // - workbench.action.terminal.navigationModeFocusNext
  // - workbench.action.terminal.navigationModeFocusPrevious
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],

  // Controls whether to confirm on exit if there are active terminal sessions.
  "terminal.integrated.confirmOnExit": false,

  // Controls whether text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": false,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,

  // Controls the style of terminal cursor.
  "terminal.integrated.cursorStyle": "block",

  // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
  "terminal.integrated.cursorWidth": 1,

  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",

  // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
  //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
  //  - off: Do not set the `$LANG` environment variable.
  //  - on: Always set the `$LANG` environment variable.
  "terminal.integrated.detectLocale": "auto",

  // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // Controls whether the terminal bell is enabled.
  "terminal.integrated.enableBell": false,

  // Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system.
  "terminal.integrated.enableFileLinks": true,

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
  "terminal.integrated.env.windows": {},

  // An experimental setting that will use the terminal title event for the dropdown title. This setting will only apply to new terminals.
  "terminal.integrated.experimentalUseTitleEvent": false,

  // Scrolling speed multiplier when pressing `Alt`.
  "terminal.integrated.fastScrollSensitivity": 5,

  // Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
  "terminal.integrated.fontFamily": "",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 14,

  // The font weight to use within the terminal for non-bold text.
  "terminal.integrated.fontWeight": "normal",

  // The font weight to use within the terminal for bold text.
  "terminal.integrated.fontWeightBold": "bold",

  // Whether new shells should inherit their environment from VS Code. This is not supported on Windows.
  "terminal.integrated.inheritEnv": true,

  // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
  "terminal.integrated.letterSpacing": 0,

  // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
  "terminal.integrated.macOptionClickForcesSelection": false,

  // Controls whether to treat the option key as the meta key in the terminal on macOS.
  "terminal.integrated.macOptionIsMeta": false,

  // When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
  // 
  // - 1: The default, do nothing.
  // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
  // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
  // - 21: White on black or black on white.
  "terminal.integrated.minimumContrastRatio": 1,

  // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
  "terminal.integrated.mouseWheelScrollSensitivity": 1,

  // Controls how the terminal is rendered.
  //  - auto: Let VS Code guess which renderer to use.
  //  - canvas: Use the standard GPU/canvas-based renderer.
  //  - dom: Use the fallback DOM-based renderer.
  //  - experimentalWebgl: Use the experimental webgl-based renderer. Note that this has some [known issues](https://github.com/xtermjs/xterm.js/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%2Faddon%2Fwebgl) and this will only be enabled for new terminals (not hot swappable like the other renderers).
  "terminal.integrated.rendererType": "auto",

  // Controls how terminal reacts to right click.
  //  - default: Show the context menu.
  //  - copyPaste: Copy when there is a selection, otherwise paste.
  //  - paste: Paste on right click.
  //  - selectWord: Select the word under the cursor and show the context menu.
  "terminal.integrated.rightClickBehavior": "default",

  // Controls the maximum amount of lines the terminal keeps in its buffer.
  "terminal.integrated.scrollback": 1000,

  // The path of the shell that the terminal uses on Linux (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shell.linux": null,

  // The path of the shell that the terminal uses on macOS (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shell.osx": null,

  // The path of the shell that the terminal uses on Windows (default: cmd.exe). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shell.windows": null,

  // The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shellArgs.linux": [],

  // The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
  "terminal.integrated.shellArgs.windows": [],

  // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
  "terminal.integrated.showExitAlert": true,

  // Controls the working directory a split terminal starts with.
  //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
  //  - initial: A new split terminal will use the working directory that the parent terminal started with.
  //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
  "terminal.integrated.splitCwd": "inherited",

  // Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
  //  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
  //  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
  "terminal.integrated.unicodeVersion": "11",

  // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
  "terminal.integrated.windowsEnableConpty": true,

  // Priority list for output mime types
  "notebook.displayOrder": [],

  // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
  "task.autoDetect": "on",

  // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
  "task.problemMatchers.neverPrompt": false,

  // Controls whether to show the task detail for task that have a detail in the Run Task quick pick.
  "task.quickOpen.detail": true,

  // Controls the number of recent items tracked in task quick open dialog.
  "task.quickOpen.history": 30,

  // Controls whether the task quick pick is skipped when there is only one task to pick from.
  "task.quickOpen.skip": false,

  // Configures whether a warning is shown when a provider is slow
  "task.slowProviderWarning": true,

  // Controls whether Problems view should automatically reveal files when opening them.
  "problems.autoReveal": true,

  // Show Errors & Warnings on files and folder.
  "problems.decorations.enabled": true,

  // When enabled shows the current problem in the status bar.
  "problems.showCurrentInStatus": false,

  // Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,

  // Controls whether and how file paths are shown in the breadcrumbs view.
  //  - on: Show the file path in the breadcrumbs view.
  //  - off: Do not show the file path in the breadcrumbs view.
  //  - last: Only show the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",

  // Render breadcrumb items with icons.
  "breadcrumbs.icons": true,

  // When enabled breadcrumbs show `array`-symbols.
  "breadcrumbs.showArrays": true,

  // When enabled breadcrumbs show `boolean`-symbols.
  "breadcrumbs.showBooleans": true,

  // When enabled breadcrumbs show `class`-symbols.
  "breadcrumbs.showClasses": true,

  // When enabled breadcrumbs show `constant`-symbols.
  "breadcrumbs.showConstants": true,

  // When enabled breadcrumbs show `constructor`-symbols.
  "breadcrumbs.showConstructors": true,

  // When enabled breadcrumbs show `enumMember`-symbols.
  "breadcrumbs.showEnumMembers": true,

  // When enabled breadcrumbs show `enum`-symbols.
  "breadcrumbs.showEnums": true,

  // When enabled breadcrumbs show `event`-symbols.
  "breadcrumbs.showEvents": true,

  // When enabled breadcrumbs show `field`-symbols.
  "breadcrumbs.showFields": true,

  // When enabled breadcrumbs show `file`-symbols.
  "breadcrumbs.showFiles": true,

  // When enabled breadcrumbs show `function`-symbols.
  "breadcrumbs.showFunctions": true,

  // When enabled breadcrumbs show `interface`-symbols.
  "breadcrumbs.showInterfaces": true,

  // When enabled breadcrumbs show `key`-symbols.
  "breadcrumbs.showKeys": true,

  // When enabled breadcrumbs show `method`-symbols.
  "breadcrumbs.showMethods": true,

  // When enabled breadcrumbs show `module`-symbols.
  "breadcrumbs.showModules": true,

  // When enabled breadcrumbs show `namespace`-symbols.
  "breadcrumbs.showNamespaces": true,

  // When enabled breadcrumbs show `null`-symbols.
  "breadcrumbs.showNull": true,

  // When enabled breadcrumbs show `number`-symbols.
  "breadcrumbs.showNumbers": true,

  // When enabled breadcrumbs show `object`-symbols.
  "breadcrumbs.showObjects": true,

  // When enabled breadcrumbs show `operator`-symbols.
  "breadcrumbs.showOperators": true,

  // When enabled breadcrumbs show `package`-symbols.
  "breadcrumbs.showPackages": true,

  // When enabled breadcrumbs show `property`-symbols.
  "breadcrumbs.showProperties": true,

  // When enabled breadcrumbs show `string`-symbols.
  "breadcrumbs.showStrings": true,

  // When enabled breadcrumbs show `struct`-symbols.
  "breadcrumbs.showStructs": true,

  // When enabled breadcrumbs show `typeParameter`-symbols.
  "breadcrumbs.showTypeParameters": true,

  // When enabled breadcrumbs show `variable`-symbols.
  "breadcrumbs.showVariables": true,

  // Controls whether and how symbols are shown in the breadcrumbs view.
  //  - on: Show all symbols in the breadcrumbs view.
  //  - off: Do not show symbols in the breadcrumbs view.
  //  - last: Only show the current symbol in the breadcrumbs view.
  "breadcrumbs.symbolPath": "on",

  // Controls how symbols are sorted in the breadcrumbs outline view.
  //  - position: Show symbol outline in file position order.
  //  - name: Show symbol outline in alphabetical order.
  //  - type: Show symbol outline in symbol type order.
  "breadcrumbs.symbolSortOrder": "position",

  // Enable crash reports to be sent to a Microsoft online service. 
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,

  // Enable usage data and errors to be sent to a Microsoft online service.
  "telemetry.enableTelemetry": true,

  // Render Outline Elements with Icons.
  "outline.icons": true,

  // Use badges for Errors & Warnings.
  "outline.problems.badges": true,

  // Use colors for Errors & Warnings.
  "outline.problems.colors": true,

  // Show Errors & Warnings on Outline Elements.
  "outline.problems.enabled": true,

  // When enabled outline shows `array`-symbols.
  "outline.showArrays": true,

  // When enabled outline shows `boolean`-symbols.
  "outline.showBooleans": true,

  // When enabled outline shows `class`-symbols.
  "outline.showClasses": true,

  // When enabled outline shows `constant`-symbols.
  "outline.showConstants": true,

  // When enabled outline shows `constructor`-symbols.
  "outline.showConstructors": true,

  // When enabled outline shows `enumMember`-symbols.
  "outline.showEnumMembers": true,

  // When enabled outline shows `enum`-symbols.
  "outline.showEnums": true,

  // When enabled outline shows `event`-symbols.
  "outline.showEvents": true,

  // When enabled outline shows `field`-symbols.
  "outline.showFields": true,

  // When enabled outline shows `file`-symbols.
  "outline.showFiles": true,

  // When enabled outline shows `function`-symbols.
  "outline.showFunctions": true,

  // When enabled outline shows `interface`-symbols.
  "outline.showInterfaces": true,

  // When enabled outline shows `key`-symbols.
  "outline.showKeys": true,

  // When enabled outline shows `method`-symbols.
  "outline.showMethods": true,

  // When enabled outline shows `module`-symbols.
  "outline.showModules": true,

  // When enabled outline shows `namespace`-symbols.
  "outline.showNamespaces": true,

  // When enabled outline shows `null`-symbols.
  "outline.showNull": true,

  // When enabled outline shows `number`-symbols.
  "outline.showNumbers": true,

  // When enabled outline shows `object`-symbols.
  "outline.showObjects": true,

  // When enabled outline shows `operator`-symbols.
  "outline.showOperators": true,

  // When enabled outline shows `package`-symbols.
  "outline.showPackages": true,

  // When enabled outline shows `property`-symbols.
  "outline.showProperties": true,

  // When enabled outline shows `string`-symbols.
  "outline.showStrings": true,

  // When enabled outline shows `struct`-symbols.
  "outline.showStructs": true,

  // When enabled outline shows `typeParameter`-symbols.
  "outline.showTypeParameters": true,

  // When enabled outline shows `variable`-symbols.
  "outline.showVariables": true,

  // Experimental: An array of Timeline sources that should be excluded from the Timeline view
  "timeline.excludeSources": null,

  // Configure editor settings to be overridden for [css] language.
  "[css]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [dart] language.
  "[dart]": {
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.detectIndentation": false
  },

  // Configure editor settings to be overridden for [git-commit] language.
  "[git-commit]": {
    "editor.rulers": [
      72
    ]
  },

  // Configure editor settings to be overridden for [go] language.
  "[go]": {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [handlebars] language.
  "[handlebars]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [html] language.
  "[html]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [json] language.
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [jsonc] language.
  "[jsonc]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [less] language.
  "[less]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [makefile] language.
  "[makefile]": {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [markdown] language.
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": false
  },

  // Configure editor settings to be overridden for [scss] language.
  "[scss]": {
    "editor.suggest.insertMode": "replace"
  },

  // Configure editor settings to be overridden for [search-result] language.
  "[search-result]": {
    "editor.lineNumbers": "off"
  },

  // Configure editor settings to be overridden for [shellscript] language.
  "[shellscript]": {
    "files.eol": "\n"
  },

  // Configure editor settings to be overridden for [yaml] language.
  "[yaml]": {
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": true
    }
  },

  // When enabled extensions are downloaded locally and installed on remote.
  "remote.downloadExtensionsLocally": false,

  // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
  "remote.extensionKind": {
    "pub.name": [
      "ui"
    ]
  },

  // Restores the ports you forwarded in a workspace.
  "remote.restoreForwardedPorts": false,

  // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Controls the behavior of the settings editor Table of Contents while searching.
  //  - hide: Hide the Table of Contents while searching.
  //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // [Experimental] Controls whether to delegate "extensionHost"-type launch configs to the js-debug extension.
  "debug.extensionHost.useV3": false,

  // Automatically attach node debugger when node.js was launched in debug mode from integrated terminal.
  //  - disabled: Auto attach is disabled and not shown in status bar.
  //  - on: Auto attach is active.
  //  - off: Auto attach is inactive.
  "debug.node.autoAttach": "disabled",

  // Controls whether to show a warning when the 'useWSL' attribute is used.
  "debug.node.showUseWslIsDeprecatedWarning": true,

  // [Experimental] Controls whether to delegate "node"-type launch configs to the js-debug extension.
  "debug.node.useV3": false,

  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // Path to a folder containing Emmet profiles and snippets.
  "emmet.extensionsPath": null,

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
  //  E.g.: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},

  // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in css/scss/less files is parsed.
  "emmet.optimizeStylesheetParsing": true,

  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},

  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
  "emmet.showAbbreviationSuggestions": true,

  // Shows expanded Emmet abbreviations as suggestions.
  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option `"always"` applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",

  // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
  "emmet.showSuggestionsAsSnippets": false,

  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},

  // When enabled, Emmet abbreviations are expanded when pressing TAB.
  "emmet.triggerExpansionOnTab": false,

  // Variables to be used in Emmet snippets
  "emmet.variables": {},

  // Controls whether force push (with or without lease) is enabled.
  "git.allowForcePush": false,

  // Always show the Staged Changes resource group.
  "git.alwaysShowStagedChangesResourceGroup": false,

  // Controls the signoff flag for all commits.
  "git.alwaysSignOff": false,

  // When enabled, commits will automatically be fetched from the default remote of the current Git repository.
  "git.autofetch": false,

  // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
  "git.autofetchPeriod": 180,

  // Whether auto refreshing is enabled.
  "git.autorefresh": true,

  // Configures when repositories should be automatically detected.
  //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
  //  - false: Disable automatic repository scanning.
  //  - subFolders: Scan for subfolders of the currently opened folder.
  //  - openEditors: Scan for parent folders of open files.
  "git.autoRepositoryDetection": true,

  // Stash any changes before pulling and restore them after successful pull.
  "git.autoStash": false,

  // Controls the sort order for branches.
  "git.branchSortOrder": "committerdate",

  // A regular expression to validate new branch names.
  "git.branchValidationRegex": "",

  // The character to replace whitespace in new branch names.
  "git.branchWhitespaceChar": "-",

  // Controls what type of branches are listed when running `Checkout to...`.
  //  - all: Show all references.
  //  - local: Show only local branches.
  //  - tags: Show only tags.
  //  - remote: Show only remote branches.
  "git.checkoutType": "all",

  // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
  "git.confirmEmptyCommits": true,

  // Controls whether to ask for confirmation before force-pushing.
  "git.confirmForcePush": true,

  // Confirm before synchronizing git repositories.
  "git.confirmSync": true,

  // Controls the Git count badge.
  //  - all: Count all changes.
  //  - tracked: Count only tracked changes.
  //  - off: Turn off counter.
  "git.countBadge": "all",

  // Controls whether Git contributes colors and badges to the explorer and the open editors view.
  "git.decorations.enabled": true,

  // The default location to clone a git repository.
  "git.defaultCloneDirectory": null,

  // Controls whether to automatically detect git submodules.
  "git.detectSubmodules": true,

  // Controls the limit of git submodules detected.
  "git.detectSubmodulesLimit": 10,

  // Enables commit signing with GPG.
  "git.enableCommitSigning": false,

  // Whether git is enabled.
  "git.enabled": true,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Controls whether the Git Sync command appears in the status bar.
  "git.enableStatusBarSync": true,

  // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
  "git.fetchOnPull": false,

  // List of git repositories to ignore.
  "git.ignoredRepositories": [],

  // Ignores the legacy Git warning.
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository.
  "git.ignoreLimitWarning": false,

  // Ignores the warning when Git is missing.
  "git.ignoreMissingGitWarning": false,

  // Controls when to show commit message input validation.
  "git.inputValidation": "warn",

  // Controls the commit message length threshold for showing a warning.
  "git.inputValidationLength": 72,

  // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
  "git.inputValidationSubjectLength": 50,

  // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
  "git.openDiffOnClick": true,

  // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows).
  "git.path": null,

  // Runs a git command after a successful commit.
  //  - none: Don't run any command after a commit.
  //  - push: Run 'Git Push' after a successful commit.
  //  - sync: Run 'Git Sync' after a successful commit.
  "git.postCommitCommand": "none",

  // Controls whether Git should check for unsaved files before committing.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeCommit": "always",

  // Fetch all tags when pulling.
  "git.pullTags": true,

  // Force git to use rebase when running the sync command.
  "git.rebaseWhenSync": false,

  // List of paths to search for git repositories in.
  "git.scanRepositories": [],

  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true,

  // Controls whether git actions should show progress.
  "git.showProgress": true,

  // Controls whether to show a notification when a push is successful.
  "git.showPushSuccessNotification": false,

  // Control which changes are automatically staged by Smart Commit.
  //  - all: Automatically stage all changes.
  //  - tracked: Automatically staged tracked changes only.
  "git.smartCommitChanges": "all",

  // Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": true,

  // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
  "git.supportCancellation": false,

  // Controls how untracked changes behave.
  //  - mixed: All changes, tracked and untracked, appear together and behave equally.
  //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
  //  - hidden: Untracked changes are hidden and excluded from several actions.
  "git.untrackedChanges": "mixed",

  // Controls whether force pushing uses the safer force-with-lease variant.
  "git.useForcePushWithLease": true,

  // Controls whether auto detection of Grunt tasks is on or off. Default is on.
  "grunt.autoDetect": "on",

  // Controls whether auto detection of Gulp tasks is on or off. Default is on.
  "gulp.autoDetect": "on",

  // Controls whether auto detection of Jake tasks is on or off. Default is on.
  "jake.autoDetect": "on",

  // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
  "merge-conflict.autoNavigateNextConflict.enabled": false,

  // Create a Code Lens for merge conflict blocks within editor.
  "merge-conflict.codeLens.enabled": true,

  // Create decorators for merge conflict blocks within editor.
  "merge-conflict.decorators.enabled": true,

  // Controls where the diff view should be opened when comparing changes in merge conflicts.
  //  - Current: Open the diff view in the current editor group.
  //  - Beside: Open the diff view next to the current editor group.
  //  - Below: Open the diff view below the current editor group.
  "merge-conflict.diffViewPosition": "Current",

  // Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
  //  - peek: Show references in peek editor.
  //  - view: Show references in separate view.
  "references.preferredLocation": "peek",

  // Controls whether npm scripts should be automatically detected.
  "npm.autoDetect": "on",

  // Enable running npm scripts contained in a folder from the Explorer context menu.
  "npm.enableRunFromFolder": false,

  // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
  "npm.enableScriptExplorer": false,

  // Configure glob patterns for folders that should be excluded from automatic script detection.
  "npm.exclude": "",

  // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
  "npm.fetchOnlinePackageInfo": true,

  // The package manager used to run scripts.
  "npm.packageManager": "npm",

  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,

  // The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
  "npm.scriptExplorerAction": "open",

  // 
  "microsoftAccount.logLevel": "info",

  // Use `bookmarks.lineBackground` in `workbench.colorCustomizations` instead
  // Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Ex.: rgba(21, 126, 251, 0.1)
  "bookmarks.backgroundLineColor": "",

  // Path to another image to be presented as Bookmark
  "bookmarks.gutterIconPath": "",

  // Specifies how multi cursor handles already bookmarked lines
  //  - allLinesAtOnce: Creates bookmarks in all selected lines at once, if at least one of the lines don't have a bookmark
  //  - eachLineIndependently: Literally toggles a bookmark in each line, instead of making all lines equals
  "bookmarks.multicursor.toggleMode": "allLinesAtOnce",

  // Allow navigation look for bookmarks in all files in the project, instead of only the current
  "bookmarks.navigateThroughAllFiles": false,

  // Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
  "bookmarks.saveBookmarksInProject": false,

  // Specifies whether Bookmarks commands are displayed on the context menu
  "bookmarks.showCommandsInContextMenu": true,

  // Specifies wheher the Side Bar show be displayed expanded
  "bookmarks.sideBar.expanded": false,

  // Use a workaround for formatters like Prettier, which does not notify on document changes and messes Bookmark's Sticky behavior
  "bookmarks.useWorkaroundForFormatters": false,

  // Allow navigation to wrap around at the first and last bookmarks in scope (current file or all files)
  "bookmarks.wrapNavigation": true,

  // The file extensions recognized as SQLite database.
  "sqlite.databaseExtensions": [
    "db",
    "db3",
    "sdb",
    "s3db",
    "sqlite",
    "sqlite3"
  ],

  // Logging level in the output channel (DEBUG, INFO, WARN, ERROR)
  "sqlite.logLevel": "INFO",

  // Number of records to show per page. (-1 to show all records)
  "sqlite.recordsPerPage": 50,

  // sqlite3 command or binaries path.
  "sqlite.sqlite3": "sqlite3",

  // Global namespace constants and functions will be fully qualified (prefixed with a backslash).
  "intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

  // Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
  "intelephense.completion.insertUseDeclaration": true,

  // The maximum number of completion items returned per request.
  "intelephense.completion.maxItems": 100,

  // Method and function completions will include parentheses and trigger parameter hints.
  "intelephense.completion.triggerParameterHints": true,

  // Enables argument count diagnostics.
  "intelephense.diagnostics.argumentCount": true,

  // Enables deprecated diagnostics.
  "intelephense.diagnostics.deprecated": true,

  // Enables duplicate symbol diagnostics.
  "intelephense.diagnostics.duplicateSymbols": true,

  // Enables diagnostics in embedded languages.
  "intelephense.diagnostics.embeddedLanguages": true,

  // Enables diagnostics.
  "intelephense.diagnostics.enable": true,

  // Controls when diagnostics are run.
  //  - onType: Diagnostics will run as changes are made to the document.
  //  - onSave: Diagnostics will run when the document is saved.
  "intelephense.diagnostics.run": "onType",

  // Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
  "intelephense.diagnostics.typeErrors": true,

  // Enables undefined class constant diagnostics.
  "intelephense.diagnostics.undefinedClassConstants": true,

  // Enables undefined constant diagnostics.
  "intelephense.diagnostics.undefinedConstants": true,

  // Enables undefined function diagnostics.
  "intelephense.diagnostics.undefinedFunctions": true,

  // Enables undefined method diagnostics.
  "intelephense.diagnostics.undefinedMethods": true,

  // Enables undefined static property diagnostics.
  "intelephense.diagnostics.undefinedProperties": true,

  // DEPRECATED. Use the setting for each symbol category.
  "intelephense.diagnostics.undefinedSymbols": true,

  // Enables undefined class, interface and trait diagnostics.
  "intelephense.diagnostics.undefinedTypes": true,

  // Enables undefined variable diagnostics.
  "intelephense.diagnostics.undefinedVariables": true,

  // Enables unexpected token diagnostics.
  "intelephense.diagnostics.unexpectedTokens": true,

  // Enables unused variable, private member, and import diagnostics.
  "intelephense.diagnostics.unusedSymbols": true,

  // The directory of the entry point to the application (index.php). Defaults to the first workspace folder. Used for resolving script inclusion.
  "intelephense.environment.documentRoot": "",

  // The include paths (as individual path items) as defined in the include_path ini setting. Used for resolving script inclusion.
  "intelephense.environment.includePaths": [],

  // A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics.
  "intelephense.environment.phpVersion": "7.4.0",

  // Configure glob patterns to make files available for language server features. Inherits from files.associations.
  "intelephense.files.associations": [
    "*.php",
    "*.phtml"
  ],

  // Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
  "intelephense.files.exclude": [
    "**/.git/**",
    "**/.svn/**",
    "**/.hg/**",
    "**/CVS/**",
    "**/.DS_Store/**",
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**/{Tests,tests}/**"
  ],

  // Maximum file size in bytes.
  "intelephense.files.maxSize": 1000000,

  // Enables formatting.
  "intelephense.format.enable": true,

  // DEPRECATED. Don't use this. Go to command palette and search for enter licence key.
  "intelephense.licenceKey": "",

  // Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
  "intelephense.maxMemory": 0,

  // An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.classTemplate": {
    "summary": "$1",
    "tags": [
      "@package ${1:$SYMBOL_NAMESPACE}"
    ]
  },

  // An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.functionTemplate": {
    "summary": "$1",
    "tags": [
      "@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2",
      "@return ${1:$SYMBOL_TYPE} $2",
      "@throws ${1:$SYMBOL_TYPE} $2"
    ]
  },

  // An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
  "intelephense.phpdoc.propertyTemplate": {
    "summary": "$1",
    "tags": [
      "@var ${1:$SYMBOL_TYPE}"
    ]
  },

  // Adds or omits `@return void` from auto generated phpdoc.
  "intelephense.phpdoc.returnVoid": true,

  // 
  //  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
  //  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
  "intelephense.phpdoc.textFormat": "snippet",

  // Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
  "intelephense.phpdoc.useFullyQualifiedNames": false,

  // Glob patterns to exclude files and folders from having symbols renamed. Rename operation will fail if references and/or definitions are found in excluded files/folders.
  "intelephense.rename.exclude": [
    "**/vendor/**"
  ],

  // Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.
  "intelephense.runtime": "",

  // Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
  "intelephense.stubs": [
    "apache",
    "bcmath",
    "bz2",
    "calendar",
    "com_dotnet",
    "Core",
    "ctype",
    "curl",
    "date",
    "dba",
    "dom",
    "enchant",
    "exif",
    "FFI",
    "fileinfo",
    "filter",
    "fpm",
    "ftp",
    "gd",
    "gettext",
    "gmp",
    "hash",
    "iconv",
    "imap",
    "intl",
    "json",
    "ldap",
    "libxml",
    "mbstring",
    "meta",
    "mysqli",
    "oci8",
    "odbc",
    "openssl",
    "pcntl",
    "pcre",
    "PDO",
    "pdo_ibm",
    "pdo_mysql",
    "pdo_pgsql",
    "pdo_sqlite",
    "pgsql",
    "Phar",
    "posix",
    "pspell",
    "readline",
    "Reflection",
    "session",
    "shmop",
    "SimpleXML",
    "snmp",
    "soap",
    "sockets",
    "sodium",
    "SPL",
    "sqlite3",
    "standard",
    "superglobals",
    "sysvmsg",
    "sysvsem",
    "sysvshm",
    "tidy",
    "tokenizer",
    "xml",
    "xmlreader",
    "xmlrpc",
    "xmlwriter",
    "xsl",
    "Zend OPcache",
    "zip",
    "zlib"
  ],

  // Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
  "intelephense.telemetry.enabled": null,

  // Traces the communication between VSCode and the intelephense language server.
  "intelephense.trace.server": "off",

  // Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
  "dart.additionalAnalyzerFileExtensions": [],

  // Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.
  "dart.allowAnalytics": true,

  // Whether to consider files ending '_test.dart' that are outside of the test folder as tests. This should be enabled if you put tests inside the 'lib' folder of your Flutter application so they will be run with 'flutter test' and not 'flutter run'.
  "dart.allowTestsOutsideTestFolder": false,

  // An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level.
  "dart.analysisExcludedFolders": [],

  // Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.
  "dart.analysisServerFolding": true,

  // Whether to enable analysis for AngularDart templates (requires the angular_analyzer_plugin).
  "dart.analyzeAngularTemplates": true,

  // Additional arguments to pass to the Dart analysis server.
  "dart.analyzerAdditionalArgs": [],

  // The port number to be used for the Dart analysis server diagnostic server.
  "dart.analyzerDiagnosticsPort": null,

  // The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.
  "dart.analyzerInstrumentationLogFile": null,

  // The path to a log file for communication between Dart Code and the analysis server.
  "dart.analyzerLogFile": null,

  // The port number to be used for the Dart analysis server observatory.
  "dart.analyzerObservatoryPort": null,

  // The path to a custom Dart analysis server.
  "dart.analyzerPath": null,

  // An SSH host to run the analysis server.
  // This can be useful when modifying code on a remote machine using SSHFS.
  "dart.analyzerSshHost": null,

  // Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them.
  "dart.autoImportCompletions": true,

  // Additional args to pass to the build_runner when building/watching/serving.
  "dart.buildRunnerAdditionalArgs": [],

  // Whether to check you are using the latest version of the Dart SDK at startup.
  "dart.checkForSdkUpdates": true,

  // Whether to show annotations against constructor, method invocations and lists that span multiple lines.
  "dart.closingLabels": true,

  // Whether to mark external pub package libraries as debuggable, enabling stepping into them while debugging.
  "dart.debugExternalLibraries": false,

  // Whether to mark SDK libraries as debuggable, enabling stepping into them while debugging.
  "dart.debugSdkLibraries": false,

  // The path to a low-traffic log file for the Dart DevTools service.
  "dart.devToolsLogFile": null,

  // The port number to be used for the Dart DevTools.
  "dart.devToolsPort": null,

  // Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
  "dart.devToolsReuseWindows": true,

  // The theme to use for Dart DevTools.
  "dart.devToolsTheme": "dark",

  // An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use **/test/** to skip formatting for all test folders.
  "dart.doNotFormat": [],

  // Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [.
  "dart.enableCompletionCommitCharacters": false,

  // Whether to enable the dart_style formatter included with the Dart SDK.
  "dart.enableSdkFormatter": true,

  // Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
  "dart.env": {},

  // Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
  "dart.evaluateGettersInDebugViews": true,

  // The path to a low-traffic log file for basic extension and editor issues.
  "dart.extensionLogFile": null,

  // Whether to automatically run 'adb connect 100.115.92.2:5555' when spawning the Flutter Daemon when running on Chrome OS.
  "dart.flutterAdbConnectOnChromeOs": false,

  // Additional args to pass to all flutter commands.
  "dart.flutterAdditionalArgs": [],

  // Whether to pass the --androidx flag when running the 'Flutter: New Project' command.
  "dart.flutterAndroidX": false,

  // The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.
  "dart.flutterCreateAndroidLanguage": "kotlin",

  // The programming language to use for IOS apps when creating new projects using the 'Flutter: New Project' command.
  "dart.flutterCreateIOSLanguage": "swift",

  // Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.
  "dart.flutterCreateOffline": false,

  // The organization responsible for your new Flutter project, in reverse domain name notation. This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
  "dart.flutterCreateOrganization": null,

  // The path to a log file for the 'flutter daemon' communication which is the service that provides information about connected devices used to show in the status bar.
  "dart.flutterDaemonLogFile": null,

  // Whether to show Flutter icons and colors in the editor gutter.
  "dart.flutterGutterIcons": true,

  // Whether to automatically send a Hot Reload request during debug session when saving files.
  "dart.flutterHotReloadOnSave": true,

  // Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.
  "dart.flutterHotRestartOnSave": true,

  // Whether to show the Flutter Outline tree in the side bar.
  "dart.flutterOutline": true,

  // The path to a log file for 'flutter run' which is used to launch Flutter applications from VS Code. This is useful when trying to diagnose issues with applications launching (or failing to) on simulators and devices. Use ${name} in the log file name to prevent concurrent debug sessions overwriting each others logs.
  "dart.flutterRunLogFile": null,

  // The path to a directory to save Flutter screenshots.
  "dart.flutterScreenshotPath": null,

  // The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project folder, FLUTTER_ROOT environment variable and the PATH environment variable.
  "dart.flutterSdkPath": null,

  // An array of strings that are either Flutter SDKs or folders that contains multiple Flutter SDKs in sub-folders. When set, the version number in the status bar will be clickable to quickly switch between SDKs.
  "dart.flutterSdkPaths": [],

  // Whether to set newly connected devices as the current device in Flutter projects.
  "dart.flutterSelectDeviceWhenConnected": true,

  // Whether to use Flutter's structured error support for improve error display.
  "dart.flutterStructuredErrors": true,

  // The path to a log file for 'flutter test' which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use ${name} in the log file name to prevent concurrent debug sessions overwriting each others logs.
  "dart.flutterTestLogFile": null,

  // Whether to pass --track-widget-creation to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
  "dart.flutterTrackWidgetCreation": true,

  // Whether to insert argument placeholders during code completions. This feature is automatically disabled when enableCompletionCommitCharacters is enabled.
  "dart.insertArgumentPlaceholders": true,

  // The maximum length of a line of code. This is used by the document formatter.
  "dart.lineLength": 80,

  // The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
  "dart.maxLogLineLength": 2000,

  // Whether to show a notification the first few times an analysis server exception occurs.
  "dart.notifyAnalyzerErrors": true,

  // The path to a log file for communication between Dart Code and Observatory (the VM debugger). This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use ${name} in the log file name to prevent concurrent debug sessions overwriting each others logs.
  "dart.observatoryLogFile": null,

  // Whether to automatically open DevTools at the start of a debug session.
  "dart.openDevTools": "never",

  // When to automatically switch focus to the test list (array to support multiple values).
  "dart.openTestView": [
    "testRunStart"
  ],

  // Whether to register Pub Build Runner tasks with VS Code.
  "dart.previewBuildRunnerTasks": false,

  // Whether to enable the Flutter UI Guides preview.
  "dart.previewFlutterUiGuides": false,

  // Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
  "dart.previewFlutterUiGuidesCustomTracking": false,

  // Whether to perform hot-reload-on-save based on a filesystem watcher for Dart files rather than using VS Code's onDidSave event. This allows reloads to trigger when external tools modify Dart source files.
  "dart.previewHotReloadOnSaveWatcher": false,

  // Whether to run the analyzer in LSP mode (experimental, requires restart).
  "dart.previewLsp": false,

  // Whether to enable new behaviour for code completion to include @required arguments as placeholders (when using dart.insertArgumentPlaceholders).
  "dart.previewNewCompletionPlaceholders": true,

  // Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 15 or fewer values for performance reasons.
  "dart.previewToStringInDebugViews": false,

  // Whether to prompt to get packages when opening a project with out of date packages.
  "dart.promptToGetPackages": true,

  // Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
  "dart.promptToRunIfErrors": true,

  // Additional args to pass to all pub commands.
  "dart.pubAdditionalArgs": [],

  // The path to a log file for 'pub run test' runs. This is useful when trying to diagnose issues with unit test executions. Use ${name} in the log file name to prevent concurrent debug sessions overwriting each others logs.
  "dart.pubTestLogFile": null,

  // Whether to automatically run 'pub get' whenever pubspec.yaml is saved.
  "dart.runPubGetOnPubspecChanges": true,

  // The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the PATH environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.
  "dart.sdkPath": null,

  // An array of strings that are either Dart SDKs or folders that contains multiple Dart SDKs in sub-folders. When set, the version number in the status bar will be clickable to quickly switch between SDKs.
  "dart.sdkPaths": [],

  // Whether to show logs from dart:developer's log() function in the debug console.
  "dart.showDartDeveloperLogs": true,

  // Whether to show CodeLens actions in the editor for opening online DartPad samples.
  "dart.showDartPadSampleCodeLens": true,

  // Whether to show quick fixes for ignoring hints and lints.
  "dart.showIgnoreQuickFixes": false,

  // Whether to show CodeLens actions in the editor for quick running/debugging tests.
  "dart.showTestCodeLens": true,

  // Whether to show TODOs in the Problems list.
  "dart.showTodos": true,

  // Whether to automatically trigger signature help when pressing keys such as , and (.
  "dart.triggerSignatureHelpAutomatically": false,

  // Whether to use specific ports for Observatory and DevTools when running in Chrome OS. This is required to connect from the native Chrome OS browser but will prevent apps from launching if the ports are already in-use (for example if trying to run a second app).
  "dart.useKnownChromeOSPorts": true,

  // Additional args to pass to the Dart VM when running/debugging command line apps.
  "dart.vmAdditionalArgs": [],

  // Whether to show a warning when modifying files outside of the workspace.
  "dart.warnWhenEditingFilesOutsideWorkspace": true,

  // The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web applications. Use ${name} in the log file name to prevent concurrent debug sessions overwriting each others logs.
  "dart.webDaemonLogFile": null,

  // Always show the ESlint status bar item.
  "eslint.alwaysShowStatus": false,

  // The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
  // Turns auto fix on save on or off.
  "eslint.autoFixOnSave": false,

  // 
  "eslint.codeAction.disableRuleComment": {
    "enable": true,
    "location": "separateLine"
  },

  // 
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },

  // Specifies the code action mode. Possible values are 'all' and 'problems'.
  //  - all: Fixes all possible problems in the file. This option might take some time.
  //  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
  "eslint.codeActionsOnSave.mode": "all",

  // Enables ESLint debug mode (same as --debug on the command line)
  "eslint.debug": false,

  // Controls whether eslint is enabled for JavaScript files or not.
  "eslint.enable": true,

  // Enables ESLint as a formatter.
  "eslint.format.enable": false,

  // Controls whether a task for linting the whole workspace will be available.
  "eslint.lintTask.enable": false,

  // Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
  "eslint.lintTask.options": ".",

  // Whether ESlint should migrate auto fix on save settings.
  "eslint.migration.2_x": "on",

  // A path added to NODE_PATH when resolving the eslint module.
  "eslint.nodePath": null,

  // Whether ESLint should issue a warning on ignored files.
  "eslint.onIgnoredFiles": "off",

  // The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
  "eslint.options": {},

  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",

  // An array of language ids for which the extension should probe if support is installed.
  "eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown"
  ],

  // This option is deprecated. Use eslint.lintTask.enable instead.
  // Controls whether a task for linting the whole workspace will be available.
  "eslint.provideLintTask": false,

  // Turns on quiet mode, which ignores warnings.
  "eslint.quiet": false,

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",

  // The location of the node binary to run ESLint under.
  "eslint.runtime": null,

  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",

  // An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
  "eslint.validate": [],

  // 
  "eslint.workingDirectories": [],

  // Always prompt with repository picker when running Git History
  "gitHistory.alwaysPromptRepositoryPicker": false,

  // Avatar image cache expiration (0 = cache disabled)
  "gitHistory.avatarCacheExpiration": 60,

  // Whether to display the commit explorer view
  "gitHistory.hideCommitViewExplorer": false,

  // Output log information
  "gitHistory.logLevel": "Info",

  // Default number of items to be displayed in Git History Viewer
  "gitHistory.pageSize": 100,

  // Whether to display a button in the editor title menu bar
  "gitHistory.showEditorTitleMenuBarIcons": true,

  // Specifies where the 'Git: View History' action appears on the title of SCM Providers.
  //  - Inline: Show the 'Git: View History' action on the title of SCM Providers
  //  - More Actions: Show the 'Git: View History' action in the 'More Actions...' menu on the title of SCM Providers
  "gitHistory.sourceCodeProviderIntegrationLocation": "Inline",

  // Specifies the length of abbreviated commit ids (shas)
  "gitlens.advanced.abbreviatedShaLength": "7",

  // Specifies additional arguments to pass to the `git blame` command
  "gitlens.advanced.blame.customArguments": null,

  // Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
  "gitlens.advanced.blame.delayAfterEdit": 5000,

  // Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
  "gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

  // Specifies whether git output will be cached — changing the default is not recommended
  "gitlens.advanced.caching.enabled": true,

  // Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
  "gitlens.advanced.fileHistoryFollowsRenames": true,

  // Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
  "gitlens.advanced.maxListItems": 200,

  // Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
  "gitlens.advanced.maxSearchItems": 200,

  // Specifies which messages should be suppressed
  "gitlens.advanced.messages": {
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitDisabledWarning": false,
    "suppressGitVersionWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressSupportGitLensNotification": false
  },

  // Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
  "gitlens.advanced.quickPick.closeOnFocusOut": true,

  // Specifies how many folders deep to search for repositories
  "gitlens.advanced.repositorySearchDepth": 1,

  // Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
  "gitlens.advanced.similarityThreshold": null,

  // Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting
  "gitlens.advanced.telemetry.enabled": true,

  // Specifies whether to use the symmetric difference (three-dot) notation or the range (two-dot) notation for comparisons. See the [Git docs](https://git-scm.com/docs/gitrevisions#_dotted_range_notations)
  "gitlens.advanced.useSymmetricDifferenceNotation": true,

  // Specifies autolinks to external resources in commit messages. Use <num> as the variable for the reference number
  "gitlens.autolinks": [],

  // Specifies whether to show avatar images in the gutter blame annotations
  "gitlens.blame.avatars": true,

  // Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
  "gitlens.blame.compact": true,

  // Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
  "gitlens.blame.dateFormat": null,

  // Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
  "gitlens.blame.format": "${message|40?} ${agoOrDate|14-}",

  // Specifies whether to provide a heatmap indicator in the gutter blame annotations
  "gitlens.blame.heatmap.enabled": true,

  // Specifies where the heatmap indicators will be shown in the gutter blame annotations
  //  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
  //  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
  "gitlens.blame.heatmap.location": "right",

  // Specifies whether to highlight lines associated with the current line
  "gitlens.blame.highlight.enabled": true,

  // Specifies where the associated line highlights will be shown
  "gitlens.blame.highlight.locations": [
    "gutter",
    "line",
    "overview"
  ],

  // Specifies whether to ignore whitespace when comparing revisions during blame operations
  "gitlens.blame.ignoreWhitespace": false,

  // Specifies whether gutter blame annotations will be separated by a small gap
  "gitlens.blame.separateLines": true,

  // Specifies how the gutter blame annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.blame.toggleMode": "file",

  // Specifies the command to be executed when an _authors_ code lens is clicked
  //  - gitlens.toggleFileBlame: Toggles file blame annotations
  //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
  //  - gitlens.revealCommitInView: Reveals the commit in the Repositories view
  //  - gitlens.showCommitsInView: Shows the commits within the range in the Search Commits view
  //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
  "gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

  // Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
  "gitlens.codeLens.authors.enabled": true,

  // Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
  "gitlens.codeLens.enabled": true,

  // Specifies whether to provide any Git code lens on symbols that span only a single line
  "gitlens.codeLens.includeSingleLineSymbols": false,

  // Specifies the command to be executed when a _recent change_ code lens is clicked
  //  - gitlens.toggleFileBlame: Toggles file blame annotations
  //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
  //  - gitlens.revealCommitInView: Reveals the commit in the Repositories view
  //  - gitlens.showCommitsInView: Shows the commit in the Search Commits view
  //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
  "gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

  // Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
  "gitlens.codeLens.recentChange.enabled": true,

  // Specifies where Git code lens will be shown in the document
  "gitlens.codeLens.scopes": [
    "document",
    "containers"
  ],

  // Specifies where Git code lens will be shown in the document for the specified languages
  "gitlens.codeLens.scopesByLanguage": [{
      "language": "azure-pipelines",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "ansible",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "css",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "html",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "json",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "jsonc",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "less",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "postcss",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "python",
      "symbolScopes": [
        "!Module"
      ]
    },
    {
      "language": "scss",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "stylus",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "vue",
      "scopes": [
        "document"
      ]
    },
    {
      "language": "yaml",
      "scopes": [
        "document"
      ]
    }
  ],

  // Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
  "gitlens.codeLens.symbolScopes": [],

  // Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
  "gitlens.currentLine.dateFormat": null,

  // Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
  "gitlens.currentLine.enabled": true,

  // Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
  "gitlens.currentLine.format": "${author}, ${agoOrDate} • ${message}",

  // Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport
  "gitlens.currentLine.scrollable": true,

  // Specifies debug mode
  "gitlens.debug": false,

  // Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
  "gitlens.defaultDateFormat": null,

  // Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
  "gitlens.defaultDateShortFormat": null,

  // Specifies whether commit dates should use the authored or committed date
  //  - authored: Uses the date when the changes were authored (i.e. originally written)
  //  - committed: Uses the date when the changes were committed
  "gitlens.defaultDateSource": "authored",

  // Specifies how dates will be displayed by default
  //  - relative: e.g. 1 day ago
  //  - absolute: e.g. July 25th, 2018 7:18pm
  "gitlens.defaultDateStyle": "relative",

  // Specifies the style of the gravatar default (fallback) images
  //  - identicon: A geometric pattern
  //  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
  //  - monsterid: A monster with different colors, faces, etc
  //  - retro: 8-bit arcade-style pixelated faces
  //  - robohash: A robot with different colors, faces, etc
  //  - wavatar: A face with differing features and backgrounds
  "gitlens.defaultGravatarsStyle": "robohash",

  // Specifies whether to dismiss the Git Commands menu when focus is lost (if not, press `ESC` to dismiss)
  "gitlens.gitCommands.closeOnFocusOut": false,

  // Specifies whether to match all or any commit message search patterns
  "gitlens.gitCommands.search.matchAll": false,

  // Specifies whether to match commit search patterns with or without regard to casing
  "gitlens.gitCommands.search.matchCase": false,

  // Specifies whether to match commit search patterns using regular expressions
  "gitlens.gitCommands.search.matchRegex": true,

  // Specifies whether to show the commit search results in the _Search Commits_ view or directly within the quick pick menu
  "gitlens.gitCommands.search.showResultsInView": true,

  // Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
  "gitlens.gitCommands.skipConfirmations": [
    "fetch:command",
    "stash-push:command",
    "switch:command"
  ],

  // Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
  "gitlens.heatmap.ageThreshold": "90",

  // Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
  "gitlens.heatmap.coldColor": "#0a60f6",

  // Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
  "gitlens.heatmap.hotColor": "#f66a0a",

  // Specifies how the gutter heatmap annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.heatmap.toggleMode": "file",

  // Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
  "gitlens.hovers.annotations.changes": true,

  // Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
  "gitlens.hovers.annotations.details": true,

  // Specifies whether to provide any hovers when showing blame annotations
  "gitlens.hovers.annotations.enabled": true,

  // Specifies when to trigger hovers when showing blame annotations
  //  - annotation: Only shown when hovering over the line annotation
  //  - line: Shown when hovering anywhere over the line
  "gitlens.hovers.annotations.over": "line",

  // Specifies whether to show avatar images in hovers
  "gitlens.hovers.avatars": true,

  // Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
  //  - line: Shows only the changes to the line
  //  - hunk: Shows the set of related changes
  "gitlens.hovers.changesDiff": "line",

  // Specifies whether to provide a _changes (diff)_ hover for the current line
  "gitlens.hovers.currentLine.changes": true,

  // Specifies whether to provide a _commit details_ hover for the current line
  "gitlens.hovers.currentLine.details": true,

  // Specifies whether to provide any hovers for the current line
  "gitlens.hovers.currentLine.enabled": true,

  // Specifies when to trigger hovers for the current line
  //  - annotation: Only shown when hovering over the line annotation
  //  - line: Shown when hovering anywhere over the line
  "gitlens.hovers.currentLine.over": "annotation",

  // Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",

  // Specifies whether to provide any hovers
  "gitlens.hovers.enabled": true,

  // Specifies whether to enable experimental features
  "gitlens.insiders": false,

  // Specifies the keymap to use for GitLens shortcut keys
  //  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
  //  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
  //  - none: No shortcut keys will be added
  "gitlens.keymap": "chorded",

  // Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
  "gitlens.liveshare.allowGuestAccess": true,

  // Specifies which commands will be added to which menus
  "gitlens.menus": {
    "editor": {
      "blame": false,
      "clipboard": true,
      "compare": true,
      "details": false,
      "history": false,
      "remote": false
    },
    "editorGroup": {
      "blame": true,
      "compare": true
    },
    "editorTab": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "explorer": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "scmGroup": {
      "compare": true,
      "openClose": true,
      "stash": true,
      "stashInline": true
    },
    "scmItem": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true,
      "stash": true
    }
  },

  // Specifies the active GitLens mode, if any
  "gitlens.mode.active": "",

  // Specifies the active GitLens mode alignment in the status bar
  //  - left: Aligns to the left
  //  - right: Aligns to the right
  "gitlens.mode.statusBar.alignment": "right",

  // Specifies whether to provide the active GitLens mode in the status bar
  "gitlens.mode.statusBar.enabled": true,

  // Specifies the user-defined GitLens modes
  "gitlens.modes": {
    "zen": {
      "name": "Zen",
      "statusBarItemName": "Zen",
      "description": "for a zen-like experience, disables many visual features",
      "codeLens": false,
      "currentLine": false,
      "hovers": false,
      "statusBar": false
    },
    "review": {
      "name": "Review",
      "statusBarItemName": "Reviewing",
      "description": "for reviewing code, enables many visual features",
      "codeLens": true,
      "currentLine": true,
      "hovers": true
    }
  },

  // Specifies how much (if any) output will be sent to the GitLens output channel
  //  - silent: Logs nothing
  //  - errors: Logs only errors
  //  - verbose: Logs all errors, warnings, and messages
  //  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
  "gitlens.outputLevel": "errors",

  // Specifies where the highlights of the recently changed lines will be shown
  "gitlens.recentChanges.highlight.locations": [
    "gutter",
    "line",
    "overview"
  ],

  // Specifies how the recently changed lines annotations will be toggled
  //  - file: Toggles each file individually
  //  - window: Toggles the window, i.e. all files at once
  "gitlens.recentChanges.toggleMode": "file",

  // Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services
  "gitlens.remotes": null,

  // Specifies whether to show What's New after upgrading to new feature releases
  "gitlens.showWhatsNewAfterUpgrades": true,

  // Specifies how branches are sorted in quick pick menus and views
  //  - name:desc: Sorts branches by name in descending order
  //  - name:asc: Sorts branches by name in ascending order
  //  - date:desc: Sorts branches by the most recent commit date in descending order
  //  - date:asc: Sorts branches by the most recent commit date in ascending order
  "gitlens.sortBranchesBy": "name:desc",

  // Specifies how tags are sorted in quick pick menus and views
  //  - name:desc: Sorts tags by name in descending order
  //  - name:asc: Sorts tags by name in ascending order
  //  - date:desc: Sorts tags by date in descending order
  //  - date:asc: Sorts tags by date in ascending order
  "gitlens.sortTagsBy": "name:desc",

  // Specifies the blame alignment in the status bar
  //  - left: Aligns to the left
  //  - right: Aligns to the right
  "gitlens.statusBar.alignment": "right",

  // Specifies the command to be executed when the blame status bar item is clicked
  //  - gitlens.toggleFileBlame: Toggles file blame annotations
  //  - gitlens.diffWithPrevious: Compares the current line commit with the previous
  //  - gitlens.diffWithWorking: Compares the current line commit with the working tree
  //  - gitlens.toggleCodeLens: Toggles Git code lens
  //  - gitlens.revealCommitInView: Reveals the commit in the Repositories view
  //  - gitlens.showCommitsInView: Shows the commit in the Search Commits view
  //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
  //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
  //  - gitlens.showQuickFileHistory: Shows a file history quick pick
  //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
  "gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

  // Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
  "gitlens.statusBar.dateFormat": null,

  // Specifies whether to provide blame information in the status bar
  "gitlens.statusBar.enabled": true,

  // Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
  "gitlens.statusBar.format": "${author}, ${agoOrDate}",

  // Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
  "gitlens.statusBar.reduceFlicker": false,

  // Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.authorsOnly": "Unsaved changes (cannot determine authors)",

  // Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "Unsaved changes (cannot determine recent change or authors)",

  // Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "Unsaved changes (cannot determine recent change)",

  // Specifies the description format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.commitDescriptionFormat": "${changes  •  }${author}, ${agoOrDate}",

  // Specifies the description format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.commitFileDescriptionFormat": "${directory}${  ←  originalPath}",

  // Specifies the format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.commitFileFormat": "${file}",

  // Specifies the format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.commitFormat": "${❰ tips ❱➤  }${message}",

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Compare_ view
  "gitlens.views.compare.avatars": true,

  // Specifies whether to show the _Compare_ view
  "gitlens.views.compare.enabled": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `tree` or `auto`
  "gitlens.views.compare.files.compact": true,

  // Specifies how the _Compare_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.compare.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.compare.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `auto`
  "gitlens.views.compare.files.threshold": 5,

  // Specifies where to show the _Compare_ view
  //  - gitlens: Adds to the GitLens side bar
  //  - explorer: Adds to the Explorer side bar
  //  - scm: Adds to the Source Control side bar
  "gitlens.views.compare.location": "gitlens",

  // Specifies the default number of items to show in a view list. Use 0 to specify no limit
  "gitlens.views.defaultItemLimit": 10,

  // Specifies whether to show avatar images instead of status icons in the _File History_ view
  "gitlens.views.fileHistory.avatars": true,

  // Specifies whether to show the _File History_ view
  "gitlens.views.fileHistory.enabled": true,

  // Specifies where to show the _File History_ view
  //  - gitlens: Adds to the GitLens side bar
  //  - explorer: Adds to the Explorer side bar
  //  - scm: Adds to the Source Control side bar
  "gitlens.views.fileHistory.location": "gitlens",

  // Specifies whether to show avatar images instead of status icons in the _Line History_ view
  "gitlens.views.lineHistory.avatars": true,

  // Specifies whether to show the _Line History_ view
  "gitlens.views.lineHistory.enabled": true,

  // Specifies where to show the _Line History_ view
  //  - gitlens: Adds to the GitLens side bar
  //  - explorer: Adds to the Explorer side bar
  //  - scm: Adds to the Source Control side bar
  "gitlens.views.lineHistory.location": "gitlens",

  // Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
  "gitlens.views.pageItemLimit": 20,

  // Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
  "gitlens.views.repositories.autoRefresh": true,

  // Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
  "gitlens.views.repositories.autoReveal": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
  "gitlens.views.repositories.avatars": true,

  // Specifies how the _Repositories_ view will display branches
  //  - list: Displays branches as a list
  //  - tree: Displays branches as a tree when branch names contain slashes `/`
  "gitlens.views.repositories.branches.layout": "tree",

  // Specifies whether to show the _Repositories_ view in a compact display density
  "gitlens.views.repositories.compact": false,

  // Specifies whether to show the _Repositories_ view
  "gitlens.views.repositories.enabled": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
  "gitlens.views.repositories.files.compact": true,

  // Specifies how the _Repositories_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.repositories.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
  "gitlens.views.repositories.files.threshold": 5,

  // Specifies whether to include working tree file status for each repository in the _Repositories_ view
  "gitlens.views.repositories.includeWorkingTree": true,

  // Specifies where to show the _Repositories_ view
  //  - gitlens: Adds to the GitLens side bar
  //  - explorer: Adds to the Explorer side bar
  //  - scm: Adds to the Source Control side bar
  "gitlens.views.repositories.location": "gitlens",

  // Specifies whether to show a comparison of a user-selected reference (branch, tag. etc) to the current branch or the working tree in the _Repositories_ view
  "gitlens.views.repositories.showBranchComparison": "working",

  // Specifies whether to show the tracking branch when displaying local branches in the _Repositories_ view
  "gitlens.views.repositories.showTrackingBranch": true,

  // Specifies whether to show avatar images instead of commit (or status) icons in the _Search Commits_ view
  "gitlens.views.search.avatars": true,

  // Specifies whether to show the _Search Commits_ view
  "gitlens.views.search.enabled": true,

  // Specifies whether to compact (flatten) unnecessary file nesting in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `tree` or `auto`
  "gitlens.views.search.files.compact": true,

  // Specifies how the _Search Commits_ view will display files
  //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.search.files.threshold` value and the number of files at each nesting level
  //  - list: Displays files as a list
  //  - tree: Displays files as a tree
  "gitlens.views.search.files.layout": "auto",

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `auto`
  "gitlens.views.search.files.threshold": 5,

  // Specifies where to show the _Search Commits_ view
  //  - gitlens: Adds to the GitLens side bar
  //  - explorer: Adds to the Explorer side bar
  //  - scm: Adds to the Source Control side bar
  "gitlens.views.search.location": "gitlens",

  // Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
  "gitlens.views.showRelativeDateMarkers": true,

  // Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.stashDescriptionFormat": "${changes  •  }${agoOrDate}",

  // Specifies the description format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.stashFileDescriptionFormat": "${directory}${  ←  originalPath}",

  // Specifies the format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.stashFileFormat": "${file}",

  // Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
  "gitlens.views.stashFormat": "${message}",

  // Specifies the description format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.statusFileDescriptionFormat": "${directory}${  ←  originalPath}",

  // Specifies the format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
  "gitlens.views.statusFileFormat": "${working  }${file}",

  // Include parentheses around a sole arrow function parameter
  "prettier.arrowParens": "always",

  // Controls the printing of spaces inside object literals
  "prettier.bracketSpacing": true,

  // Path to the prettier configuration file
  "prettier.configPath": "",

  // A list of languages IDs to disable this extension on
  "prettier.disableLanguages": [],

  // Specify the end of line used by prettier
  "prettier.endOfLine": "lf",

  // Specify the global whitespace sensitivity for HTML files.
  //  Valid options:
  // - `css` - Respect the default value of CSS display property.
  // - `strict` - Whitespaces are considered sensitive.
  // - `ignores` - Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",

  // Path to a .prettierignore file
  "prettier.ignorePath": ".prettierignore",

  // Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
  "prettier.insertPragma": false,

  // If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
  "prettier.jsxBracketSameLine": false,

  // Use single quotes instead of double quotes in JSX
  "prettier.jsxSingleQuote": false,

  // The package manager you use to install node modules.
  "prettier.packageManager": "npm",

  // Path to the prettier module
  "prettier.prettierPath": "",

  // Fit code within this line limit
  "prettier.printWidth": 80,

  // (Markdown) wrap prose over multiple lines
  "prettier.proseWrap": "preserve",

  // Change when properties in objects are quoted
  "prettier.quoteProps": "as-needed",

  // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
  // 
  // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
  "prettier.requireConfig": false,

  // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
  "prettier.requirePragma": false,

  // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
  // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
  "prettier.resolveGlobalModules": false,

  // Whether to add a semicolon at the end of every line
  "prettier.semi": true,

  // If true, will use single instead of double quotes
  "prettier.singleQuote": false,

  // Number of spaces it should use per tab
  "prettier.tabWidth": 2,

  // Controls the printing of trailing commas wherever possible. Valid options:
  // - `none` - No trailing commas
  // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
  // - `all` - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",

  // Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
  "prettier.useEditorConfig": true,

  // Indent lines with tabs
  "prettier.useTabs": false,

  // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
  "prettier.vueIndentScriptAndStyle": false,

  // If true, this extension will process files in node_modules
  "prettier.withNodeModules": false,

  // The path to a PHP 7+ executable.
  "php.executablePath": null,

  // The memory limit of the php language server. [Number][K|M|G]. Use '-1' to allow unlimited use of the RAM (default is 4G).
  "php.memoryLimit": "4095M",

  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
  "auto-close-tag.activationOnLanguage": [
    "xml",
    "php",
    "blade",
    "ejs",
    "jinja",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "plaintext",
    "markdown",
    "vue",
    "liquid",
    "erb",
    "lang-cfml",
    "cfml",
    "HTML (EEx)",
    "HTML (Eex)",
    "plist"
  ],

  // Whether to close self-closing tag automatically
  "auto-close-tag.enableAutoCloseSelfClosingTag": true,

  // Whether to insert close tag automatically
  "auto-close-tag.enableAutoCloseTag": true,

  // Set the tag list that would not be auto closed.
  "auto-close-tag.excludedTags": [
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ],

  // Enable both Visual Studio and Sublime Text mode
  "auto-close-tag.fullMode": false,

  // Auto close tag when </ is typed, same as Sublime Text 3
  "auto-close-tag.SublimeText3Mode": false,

  // Whether to enable anonymous usage collection.
  "vscode-mysql.enableTelemetry": true,

  // The maximum table count shown in the tree view
  "vscode-mysql.maxTableCount": 500,

  // A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
  "beautify.config": null,

  // List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
  "beautify.ignore": [],

  // Link file types to the beautifier type
  "beautify.language": {
    "js": {
      "type": [
        "javascript",
        "json",
        "jsonc"
      ],
      "filename": [
        ".jshintrc",
        ".jsbeautifyrc"
      ]
    },
    "css": [
      "css",
      "less",
      "scss"
    ],
    "html": [
      "htm",
      "html"
    ]
  },

  // Prefix for generated private member declarations
  "csharpextensions.privateMemberPrefix": "",

  // If true the document will be reformatted after codeactions are used.
  "csharpextensions.reFormatAfterChange": true,

  // Wether or not a ctor assignment of a property or variable should be prefixed with this.
  "csharpextensions.useThisForCtorAssignments": true,

  // Time of pause, in minutes
  "pomodoro.pauseTime": 5,

  // Number of repeat before long break
  "pomodoro.repeat": 4,

  // Time of work, in minutes.
  "pomodoro.workTime": 25,

  // Attach command to use for Linux containers
  "docker.attachShellCommand.linuxContainer": "/bin/sh -c \"[ -e /bin/bash ] && /bin/bash || /bin/sh\"",

  // Attach command to use for Windows containers
  "docker.attachShellCommand.windowsContainer": "cmd",

  // Equivalent to setting the DOCKER_CERT_PATH environment variable.
  "docker.certPath": "",

  // Command templates for `docker attach` / `docker exec -it` commands.
  "docker.commands.attach": "docker exec -it ${containerId} ${shellCommand}",

  // Command template(s) for `docker build` commands.
  "docker.commands.build": "docker build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

  // Command templates for `docker-compose down` commands.
  "docker.commands.composeDown": "docker-compose ${configurationFile} down",

  // Command templates for `docker-compose up` commands.
  "docker.commands.composeUp": "docker-compose ${configurationFile} up ${detached} ${build}",

  // Command templates for `docker logs` commands.
  "docker.commands.logs": "docker logs -f ${containerId}",

  // Command templates for `docker run` commands.
  "docker.commands.run": "docker run --rm -d ${exposedPorts} ${tag}",

  // Command templates for `docker run -it` (interactive) commands.
  "docker.commands.runInteractive": "docker run --rm -it ${exposedPorts} ${tag}",

  // Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
  "docker.containers.description": [
    "ContainerName",
    "Status"
  ],

  // The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
  "docker.containers.groupBy": "None",

  // The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
  "docker.containers.label": "FullTag",

  // The property to use to sort containers in Docker view: CreatedTime or Label
  "docker.containers.sortBy": "CreatedTime",

  // How often Docker context is checked for changes (seconds)
  "docker.contextRefreshInterval": 20,

  // Set to true to include --build option when docker-compose command is invoked
  "docker.dockerComposeBuild": true,

  // Set to true to include --d (detached) option when docker-compose command is invoked
  "docker.dockerComposeDetached": true,

  // Docker view refresh interval (milliseconds)
  "docker.explorerRefreshInterval": 2000,

  // Equivalent to setting the DOCKER_HOST environment variable.
  "docker.host": "",

  // Build context PATH to pass to Docker build command.
  "docker.imageBuildContextPath": "",

  // Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, and Tag
  "docker.images.description": [
    "CreatedTime"
  ],

  // The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
  "docker.images.groupBy": "Repository",

  // The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
  "docker.images.label": "Tag",

  // The property to use to sort images in Docker view: CreatedTime or Label
  "docker.images.sortBy": "CreatedTime",

  // Controls the diagnostic severity for the deprecated MAINTAINER instruction
  "docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

  // Controls the diagnostic severity for parser directives that are not written in lowercase
  "docker.languageserver.diagnostics.directiveCasing": "warning",

  // Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
  "docker.languageserver.diagnostics.emptyContinuationLine": "warning",

  // Controls the diagnostic severity for instructions that are not written in uppercase
  "docker.languageserver.diagnostics.instructionCasing": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
  "docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
  "docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
  "docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

  // Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
  "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

  // Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
  "docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

  // Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
  "docker.machineName": "",

  // Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
  "docker.networks.description": [
    "NetworkDriver",
    "CreatedTime"
  ],

  // The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
  "docker.networks.groupBy": "None",

  // The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
  "docker.networks.label": "NetworkName",

  // Show the built-in networks in the explorer.
  "docker.networks.showBuiltInNetworks": true,

  // The property to use to sort networks in Docker view: CreatedTime or Label
  "docker.networks.sortBy": "CreatedTime",

  // Prompt for registry selection if the image is not explicitly tagged.
  "docker.promptForRegistryWhenPushingImages": true,

  // Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
  "docker.showRemoteWorkspaceWarning": true,

  // Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
  "docker.tlsVerify": "",

  // Set to true to truncate long image and container registry paths in Docker view
  "docker.truncateLongRegistryPaths": false,

  // Maximum length of a registry paths displayed in Docker view, including elipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
  "docker.truncateMaxLength": 10,

  // Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
  "docker.volumes.description": [
    "CreatedTime"
  ],

  // The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
  "docker.volumes.groupBy": "None",

  // The primary property to display for a Docker volume: CreatedTime or VolumeName
  "docker.volumes.label": "VolumeName",

  // The property to use to sort volumes in Docker view: CreatedTime or Label
  "docker.volumes.sortBy": "CreatedTime",

  // Enable/disable default C# formatter (requires restart).
  "csharp.format.enable": true,

  // Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
  "csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

  // Specifies whether the references CodeLens should be shown.
  "csharp.referencesCodeLens.enabled": true,

  // Suppress the warning that the .NET Core SDK is not on the path.
  "csharp.suppressDotnetInstallWarning": false,

  // Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
  "csharp.suppressDotnetRestoreNotification": false,

  // Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
  "csharp.suppressHiddenDiagnostics": true,

  // Suppress the warning that project.json is no longer a supported project format for .NET Core applications
  "csharp.suppressProjectJsonWarning": false,

  // Suppress the notification window to add missing assets to build or debug the application.
  "csharp.supressBuildAssetsNotification": false,

  // Specifies whether the run and debug test CodeLens should be shown.
  "csharp.testsCodeLens.enabled": true,

  // Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
  "csharp.unitTestDebuggingOptions": {},

  // Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
  "omnisharp.autoStart": true,

  // The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
  "omnisharp.defaultLaunchSolution": null,

  // Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
  "omnisharp.disableMSBuildDiagnosticWarning": false,

  // Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
  "omnisharp.enableEditorConfigSupport": false,

  // If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
  "omnisharp.enableMsBuildLoadProjectsOnDemand": false,

  // Enables support for roslyn analyzers, code fixes and rulesets.
  "omnisharp.enableRoslynAnalyzers": false,

  // Specifies the level of logging output from the OmniSharp server.
  "omnisharp.loggingLevel": "information",

  // The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
  "omnisharp.maxFindSymbolsItems": 1000,

  // The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
  "omnisharp.maxProjectResults": 250,

  // The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
  "omnisharp.minFindSymbolsFilterLength": 0,

  // Specifies the path to a mono installation to use when "useGlobalMono" is set to "always" or "auto", instead of the default system one.
  "omnisharp.monoPath": null,

  // Specifies the path to OmniSharp. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf.
  "omnisharp.path": null,

  // The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
  "omnisharp.projectLoadTimeout": 60,

  // Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
  "omnisharp.useEditorFormattingSettings": true,

  // Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 6.4.0 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 6.4.0 or greater is available on the PATH.
  //  - auto: Automatically launch OmniSharp with "mono" if version 6.4.0 or greater is available on the PATH.
  //  - always: Always launch OmniSharp with "mono". If version 6.4.0 or greater is not available on the PATH, an error will be printed.
  //  - never: Never launch OmniSharp on a globally-installed Mono.
  "omnisharp.useGlobalMono": "auto",

  // Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
  "omnisharp.waitForDebugger": false,

  // Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
  "razor.devmode": false,

  // Specifies whether to disable Razor language features.
  "razor.disabled": false,

  // Enable/disable default Razor formatter.
  "razor.format.enable": true,

  // Specifies whether to wait for debug attach when launching the language server.
  "razor.languageServer.debug": false,

  // Overrides the path to the Razor Language Server directory.
  "razor.languageServer.directory": null,

  // Overrides the path to the Razor plugin dll.
  "razor.plugin.path": null,

  // Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
  //  - Off: Does not log messages from the Razor extension
  //  - Messages: Logs only some messages from the Razor extension
  //  - Verbose: Logs all messages from the Razor extension
  "razor.trace": "Off",

  // [Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)
  "mssql.applyLocalization": false,

  // Connection profiles defined in 'User Settings' are shown under 'MS SQL: Connect' command in the command palette.
  "mssql.connections": [{
    "server": "{{put-server-name-here}}",
    "database": "{{put-database-name-here}}",
    "user": "{{put-username-here}}",
    "password": "{{put-password-here}}"
  }],

  // [Optional] Configuration options for copying results from the Results View
  "mssql.copyIncludeHeaders": false,

  // [Optional] Configuration options for copying multi-line results from the Results View
  "mssql.copyRemoveNewLine": true,

  // Enable Query History Capture
  "mssql.enableQueryHistoryCapture": true,

  // Should Query History feature be enabled
  "mssql.enableQueryHistoryFeature": true,

  // Should column definitions be aligned?
  "mssql.format.alignColumnDefinitionsInColumns": false,

  // Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)
  "mssql.format.datatypeCasing": "none",

  // Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)
  "mssql.format.keywordCasing": "none",

  // should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'
  "mssql.format.placeCommasBeforeNextStatement": false,

  // Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines
  "mssql.format.placeSelectStatementReferencesOnNewLine": false,

  // Should IntelliSense error checking be enabled
  "mssql.intelliSense.enableErrorChecking": true,

  // Should IntelliSense be enabled
  "mssql.intelliSense.enableIntelliSense": true,

  // Should IntelliSense quick info be enabled
  "mssql.intelliSense.enableQuickInfo": true,

  // Should IntelliSense suggestions be enabled
  "mssql.intelliSense.enableSuggestions": true,

  // Should IntelliSense suggestions be lowercase
  "mssql.intelliSense.lowerCaseSuggestions": false,

  // [Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)
  "mssql.logDebugInfo": false,

  // The maximum number of recently used connections to store in the connection list.
  "mssql.maxRecentConnections": 5,

  // True for the messages pane to be open by default; false for closed
  "mssql.messagesDefaultOpen": true,

  // Should query result selections and scroll positions be saved when switching tabs (may impact performance)
  "mssql.persistQueryResultTabs": false,

  // Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'
  "mssql.query.displayBitAsNumber": true,

  // Number of query history entries to show in the Query History view
  "mssql.queryHistoryLimit": 20,

  // Set the font family for the results grid; set to blank to use the editor font
  "mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

  // Set the font size for the results grid; set to blank to use the editor size
  "mssql.resultsFontSize": 13,

  // [Optional] Delimiter for separating data items when saving results as CSV
  "mssql.saveAsCsv.delimiter": ",",

  // [Optional] File encoding used when saving results as CSV
  "mssql.saveAsCsv.encoding": "utf-8",

  // [Optional] When true, column headers are included when saving results as CSV
  "mssql.saveAsCsv.includeHeaders": true,

  // [Optional] Character(s) used for separating rows when saving results as CSV
  "mssql.saveAsCsv.lineSeparator": null,

  // [Optional] Character used for enclosing text fields when saving results as CSV
  "mssql.saveAsCsv.textIdentifier": "\"",

  // Shortcuts related to the results window
  "mssql.shortcuts": {
    "_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
    "event.toggleResultPane": "ctrl+alt+R",
    "event.focusResultsGrid": "ctrl+alt+G",
    "event.toggleMessagePane": "ctrl+alt+Y",
    "event.prevGrid": "ctrl+up",
    "event.nextGrid": "ctrl+down",
    "event.copySelection": "ctrl+C",
    "event.copyWithHeaders": "",
    "event.copyAllHeaders": "",
    "event.maximizeGrid": "",
    "event.selectAll": "ctrl+A",
    "event.saveAsJSON": "",
    "event.saveAsCSV": "",
    "event.saveAsExcel": ""
  },

  // [Optional] Should execution time be shown for individual batches
  "mssql.showBatchTime": false,

  // [Optional] Configuration options for which column new result panes should open in
  "mssql.splitPaneSelection": "next",

  // Always show rule failures as warnings, independent of the tslint configuration.
  "tslint.alwaysShowRuleFailuresAsWarnings": true,

  // The path to the rules configuration file
  "tslint.configFile": "",

  // A glob or an array of globs. Any file matching these globs will not be linted.
  "tslint.exclude": null,

  // Control if TypeScript definition files should be ignored.
  "tslint.ignoreDefinitionFiles": false,

  // Control whether tslint is enabled for JavaScript files or not.
  "tslint.jsEnable": false,

  // The package manager you use to install node modules.
  "tslint.packageManager": "npm",

  // Always show rule failures as warnings, independent of the tslint configuration.
  "tslint.suppressWhileTypeErrorsPresent": false,

  // [Experimental] Controls whether to delegate "chrome"-type launch configs to the js-debug extension.
  "debug.chrome.useV3": false,

  // Controls if plugin is enabled
  "color-highlight.enable": true,

  // An array of language ids which should be higlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
  "color-highlight.languages": [
    "*"
  ],

  // Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
  "color-highlight.markerType": "background",

  // Highlight colors on the ruler (scroll bar), true/false
  "color-highlight.markRuler": true,

  // Highlight color words in all files (grey, green, etc.)
  "color-highlight.matchWords": false,

  // Array of absolute paths to search while perform file lookups.
  "color-highlight.sass.includePaths": [],

  // Select an icon pack that enables specific icons.
  //  - angular: Icons for Angular.
  //  - angular_ngrx: Icons for Angular and ngrx.
  //  - react: Icons for React.
  //  - react_redux: Icons for React and Redux.
  //  - vue: Icons for Vue.
  //  - vue_vuex: Icons for Vue and Vuex.
  //  - nest: Icons for NestJS.
  //  - none: No icon pack enabled.
  "material-icon-theme.activeIconPack": "angular",

  // Set custom file icon associations.
  "material-icon-theme.files.associations": {},

  // Set custom folder icon associations.
  "material-icon-theme.folders.associations": {},

  // Change the color of the folder icons.
  "material-icon-theme.folders.color": "#90a4ae",

  // Set the type for the folder icons.
  //  - specific: Select specific folder icons.
  //  - classic: Select classic folder icons.
  //  - none: No folder icons.
  "material-icon-theme.folders.theme": "specific",

  // Hide explorer arrows before folder.
  "material-icon-theme.hidesExplorerArrows": false,

  // Set custom language icon associations.
  "material-icon-theme.languages.associations": {},

  // Change the opacity of the icons.
  "material-icon-theme.opacity": 1,

  // Change the saturation of the icons.
  "material-icon-theme.saturation": 1,

  // Show restart notification.
  "material-icon-theme.showReloadMessage": true,

  // Show the update message after each update.
  "material-icon-theme.showUpdateMessage": false,

  // Show the welcome message after first installation.
  "material-icon-theme.showWelcomeMessage": true,

  // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
  // 
  //  Examples : 
  // chrome --incognito --headless --remote-debugging-port=9222 
  //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
  "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

  // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
  //  NOTE: You have to install 'Debugger for Chrome' 
  // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
  // 
  //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
  "liveServer.settings.ChromeDebuggingAttachment": false,

  // Specify custom browser settings for Live Server. 
  // By Default it will open your default favorite browser.
  "liveServer.settings.CustomBrowser": null,

  // To disable information pop up messages.
  "liveServer.settings.donotShowInfoMsg": false,

  // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
  "liveServer.settings.donotVerifyTags": false,

  // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
  "liveServer.settings.file": "",

  // By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `true`
  "liveServer.settings.fullReload": false,

  // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
  "liveServer.settings.host": "127.0.0.1",

  // Setup https configuration
  "liveServer.settings.https": {
    "enable": false,
    "cert": "",
    "key": "",
    "passphrase": ""
  },

  // To ignore specific file changes
  "liveServer.settings.ignoreFiles": [
    ".vscode/**",
    "**/*.scss",
    "**/*.sass",
    "**/*.ts"
  ],

  // Mount a directory to a route. Such as [['/components', './node_modules']]
  "liveServer.settings.mount": [],

  // This the entry point of server when you're in multiroot workspace
  "liveServer.settings.multiRootWorkspaceName": null,

  // If it is true live server will start without browser opened.
  "liveServer.settings.NoBrowser": false,

  // Set Custom Port Number of Live Server. Set 0 if you want random port.
  "liveServer.settings.port": 5500,

  // To Setup Proxy
  "liveServer.settings.proxy": {
    "enable": false,
    "baseUri": "/",
    "proxyUri": "http://127.0.0.1:80"
  },

  // Set Custom root of Live Server. 
  // To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
  // Example: /subfolder1/subfolder2
  "liveServer.settings.root": "/",

  // Change this to false if you don't want the button to show in the statusbar
  "liveServer.settings.showOnStatusbar": true,

  // Open in Browser Preview inside VS Code, instead of default browser
  "liveServer.settings.useBrowserPreview": false,

  // Use local IP as host
  "liveServer.settings.useLocalIp": false,

  // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
  "liveServer.settings.useWebExt": false,

  // Delay before live reloading. Value in milliseconds. Default is 100
  "liveServer.settings.wait": 100,

  // Set it true to Auto Download the settings on code start. [Code Restart Required]
  "sync.autoDownload": false,

  // Set it true to Auto Upload on the settings change. [Code Restart Required]
  "sync.autoUpload": false,

  // Set it to true if you want to download the settings even when you have the latest settings.
  "sync.forceDownload": false,

  // Set it to true if you want to upload the settings even when the GIST has newer settings.
  "sync.forceUpload": false,

  // GitHub GIST ID for Settings Sync.
  "sync.gist": "",

  // When set to true, will show the result in status bar instead of summary page.
  "sync.quietSync": false,

  // Set it to false if you don't want to remove extensions while downloading.
  "sync.removeExtensions": true,

  // Set it to false if you don't want to upload/download the extensions.
  "sync.syncExtensions": true,

  // Filenames to search for that contain rulesets for fixers.
  "phpsab.allowedAutoRulesets": [
    ".phpcs.xml",
    ".phpcs.xml.dist",
    "phpcs.xml",
    "phpcs.xml.dist",
    "phpcs.ruleset.xml",
    "ruleset.xml"
  ],

  // Automatically search for a ruleset file to use as configuration. Overrides custom standards defined above.
  "phpsab.autoConfigSearch": true,

  // The path to composer.json
  "phpsab.composerJsonPath": "composer.json",

  // Write debug info to the console
  "phpsab.debug": false,

  // Optional. The default path to the phpcbf executable. Can be overridden if auto search is enabled.
  "phpsab.executablePathCBF": null,

  // Optional. The default path to the phpcs executable. Can be overridden if auto search is enabled.
  "phpsab.executablePathCS": null,

  // Control if this fixer is enabled for PHP files or not.
  "phpsab.fixerEnable": true,

  // Control if this sniffer is enabled for PHP files or not.
  "phpsab.snifferEnable": true,

  // When to run `phpcs`.
  "phpsab.snifferMode": "onSave",

  // Control if phpcs report should include sniff sources.
  "phpsab.snifferShowSources": false,

  // When `phpSniffer.run` is `onType`, this sets the amount of milliseconds the validator will wait after typing has stopped before it will run.
  "phpsab.snifferTypeDelay": 250,

  // Optional. The default config to use or global standard. Can be overridden if auto search is enabled.
  "phpsab.standard": null,

  // This setting will change some scope's font be bold
  "oneDarkPro.bold": false,

  // Switch different editor theme
  "oneDarkPro.editorTheme": "",

  // This setting will change some scope's font be italic
  "oneDarkPro.italic": true,

  // This setting will change the color more vivid
  "oneDarkPro.vivid": false,

}